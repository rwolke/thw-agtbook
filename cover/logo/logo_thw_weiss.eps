%!PS-Adobe-3.1 EPSF-3.0%%Title: logo_thw_weiss.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Ines Jantzen%%CreationDate: 01.09.2006%%BoundingBox: 0 0 552 112%%HiResBoundingBox: 0 0 551.0879 111.3130%%CropBox: 0 0 551.0879 111.3130%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 28 8%%BeginData: 1690 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD37FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: logo_thw_weiss.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:ba35a16e-39bc-11db-9708-000d9338e1aa'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ba35a16e-39bc-11db-9708-000d9338e1aa'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ba35a16e-39bc-11db-9708-000d9338e1aa'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2006-09-01T15:20:31+02:00</xap:CreateDate>
  <xap:ModifyDate>2006-09-01T13:21:15Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2006-09-01T15:20:31+02:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>52</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgANAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FX//2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ba35a16e-39bc-11db-9708-000d9338e1aa'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:974be0b0-39b8-11db-9708-000d9338e1aa</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:ba35a16e-39bc-11db-9708-000d9338e1aa'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -111.313 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 111.313 li551.088 111.313 li551.088 0 liclp[1 0 0 1 0 0 ] concat108.336 100.745 mo108.336 73.5884 li103.839 73.5884 li103.839 64.0884 li123.937 64.0884 li123.937 73.5884 li119.751 73.5884 li119.751 81.9537 li133.414 81.9537 li133.414 73.5884 li129.125 73.5884 li129.125 64.0884 li149.326 64.0884 li149.326 73.5884 li144.76 73.5884 li144.76 100.745 li149.326 100.745 li149.326 110.28 li129.125 110.28 li129.125 100.745 li133.414 100.745 li133.414 91.4517 li119.751 91.4517 li119.751 100.745 li124.005 100.745 li124.005 110.28 li103.839 110.28 li103.839 100.745 li108.336 100.745 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 0 cmykef158.526 100.884 mo158.526 83.983 li154.168 83.983 li154.168 74.6548 li168.626 74.6548 li168.626 100.884 li173.158 100.884 li173.158 110.28 li154.03 110.28 li154.03 100.884 li158.526 100.884 licp158.526 72.6587 mo158.526 64.0884 li168.626 64.0884 li168.626 72.6587 li158.526 72.6587 lief182.877 100.884 mo182.877 73.4517 li178.485 73.4517 li178.485 64.0884 li192.978 64.0884 li192.978 100.884 li197.509 100.884 li197.509 110.28 li178.381 110.28 li178.381 100.884 li182.877 100.884 lief205.776 83.983 mo201.21 83.983 li201.21 74.6548 li205.776 74.6548 li205.776 73.8638 li205.811 73.1412 li205.88 72.4185 li205.984 71.7642 li206.088 71.1099 li206.226 70.4908 li206.364 69.8716 li206.572 69.3208 li206.78 68.7701 li207.022 68.2876 li207.264 67.8062 li207.54 67.3248 li207.852 66.9117 li208.198 66.5328 li208.543 66.1548 li208.924 65.8101 li209.339 65.5005 li209.789 65.19 li210.273 64.9146 li210.792 64.6744 li211.345 64.4332 li211.934 64.2271 li212.556 64.0201 li213.213 63.8482 li213.905 63.6763 li214.631 63.5376 li215.392 63.4351 li216.188 63.3658 li217.018 63.2623 li217.883 63.2291 li218.782 63.1939 li219.716 63.1939 li221.896 63.1939 li221.896 71.3853 li221.86 71.3853 li221.826 71.3853 li221.792 71.3853 li221.757 71.3853 li221.722 71.3853 li221.342 71.3521 li220.996 71.3169 li220.719 71.2818 li220.442 71.2818 li220.166 71.2486 li219.958 71.2486 li219.785 71.2486 li219.613 71.2486 li219.128 71.2486 li218.644 71.2818 li218.229 71.3521 li217.848 71.4205 li217.502 71.524 li217.191 71.6275 li216.949 71.7994 li216.707 71.9712 li216.499 72.1431 li216.361 72.3834 li216.188 72.6255 li216.084 72.9341 li215.98 73.2798 li215.946 73.6236 li215.911 74.0025 li215.877 74.4498 li215.877 74.6548 li220.927 74.6548 li220.927 83.983 li215.877 83.983 li215.877 100.884 li220.858 100.884 li220.858 110.28 li201.21 110.28 li201.21 100.884 li205.776 100.884 li205.776 83.983 lief224.628 99.3345 mo234.313 99.3345 li234.348 99.7818 li234.417 100.23 li234.486 100.608 li234.625 100.987 li234.797 101.331 li234.971 101.675 li235.178 101.95 li235.42 102.226 li235.697 102.468 li236.008 102.673 li236.319 102.812 li236.7 102.983 li237.08 103.087 li237.496 103.155 li237.945 103.19 li238.395 103.224 li238.845 103.19 li239.294 103.155 li239.674 103.12 li240.021 103.019 li240.366 102.915 li240.678 102.776 li240.954 102.604 li241.231 102.397 li241.439 102.192 li241.646 101.95 li241.819 101.71 li241.958 101.435 li242.061 101.124 li242.13 100.815 li242.2 100.437 li242.2 100.093 li242.165 99.8169 li242.13 99.5416 li242.027 99.2994 li241.889 99.0591 li241.715 98.8189 li241.508 98.5767 li241.266 98.3716 li240.989 98.1646 li240.678 97.9576 li240.332 97.7505 li239.917 97.5787 li239.502 97.3716 li239.017 97.2349 li238.533 97.063 li237.98 96.8912 li237.392 96.7525 li236.942 96.649 li236.492 96.5455 li236.078 96.4439 li235.697 96.3404 li235.351 96.2369 li235.005 96.1685 li234.729 96.065 li234.417 95.9966 li233.206 95.6177 li232.065 95.2037 li231.511 94.9634 li230.993 94.7564 li230.508 94.5162 li230.024 94.2408 li229.574 93.9986 li229.125 93.7232 li228.709 93.4478 li228.329 93.1392 li227.949 92.8287 li227.603 92.5201 li227.292 92.2095 li226.98 91.899 li226.669 91.5552 li226.392 91.1763 li226.15 90.8326 li225.908 90.4537 li225.7 90.0416 li225.493 89.6626 li225.32 89.2486 li225.182 88.8013 li225.043 88.3541 li224.905 87.9068 li224.801 87.4595 li224.732 86.9771 li224.663 86.4966 li224.628 85.9791 li224.593 85.4634 li224.559 84.9478 li224.593 84.3267 li224.628 83.7076 li224.697 83.1236 li224.801 82.5376 li224.905 81.9869 li225.043 81.4361 li225.216 80.9205 li225.424 80.4029 li225.666 79.8873 li225.908 79.4048 li226.184 78.9244 li226.496 78.4771 li226.807 78.0298 li227.188 77.6158 li227.568 77.2037 li227.983 76.8248 li228.398 76.4458 li228.882 76.1021 li229.332 75.7564 li229.816 75.4478 li230.335 75.1724 li230.854 74.9302 li231.373 74.69 li231.926 74.483 li232.514 74.3111 li233.103 74.1392 li233.691 74.0357 li234.313 73.899 li234.936 73.8306 li235.593 73.7603 li236.285 73.7271 li236.977 73.7271 li237.53 73.7271 li238.049 73.7603 li238.567 73.7955 li239.086 73.8638 li239.571 73.9322 li240.055 74.0357 li240.504 74.1392 li240.954 74.2779 li241.404 74.4146 li241.854 74.5865 li242.269 74.7584 li242.684 74.9654 li243.099 75.2056 li243.514 75.4478 li243.929 75.7232 li244.344 75.9986 li244.344 74.5181 li251.781 74.5181 li251.781 84.6373 li242.338 84.6373 li242.234 84.2252 li242.165 83.8111 li242.027 83.4673 li241.923 83.1236 li241.785 82.8482 li241.611 82.5728 li241.473 82.3306 li241.266 82.1255 li241.058 81.9537 li240.851 81.815 li240.608 81.6763 li240.332 81.5748 li240.021 81.5044 li239.709 81.4361 li239.363 81.4029 li239.017 81.4029 li238.637 81.4029 li238.291 81.4361 li237.945 81.5044 li237.634 81.5748 li237.323 81.6763 li237.046 81.815 li236.769 81.9537 li236.527 82.1255 li236.319 82.3306 li236.146 82.5376 li235.974 82.7447 li235.835 82.9849 li235.731 83.2271 li235.662 83.5025 li235.628 83.7759 li235.593 84.0513 li235.628 84.4302 li235.662 84.7759 li235.766 85.0845 li235.87 85.3951 li236.008 85.6705 li236.181 85.9107 li236.423 86.1509 li236.666 86.358 li236.977 86.6002 li237.357 86.8052 li237.876 87.0123 li238.464 87.2525 li239.156 87.4947 li239.917 87.7349 li240.782 87.9752 li241.75 88.2173 li243.376 88.6646 li244.829 89.1119 li245.521 89.3521 li246.177 89.6275 li246.8 89.8697 li247.388 90.1451 li247.942 90.3853 li248.495 90.6607 li248.98 90.9361 li249.429 91.2466 li249.879 91.522 li250.259 91.8306 li250.64 92.1412 li250.951 92.4498 li251.262 92.7603 li251.539 93.1041 li251.816 93.4478 li252.058 93.8267 li252.3 94.2056 li252.507 94.6197 li252.681 95.0318 li252.854 95.4458 li252.992 95.8931 li253.13 96.3736 li253.234 96.856 li253.337 97.3384 li253.407 97.8541 li253.441 98.4048 li253.476 98.9556 li253.476 99.5064 li253.476 100.161 li253.407 100.78 li253.337 101.399 li253.234 101.985 li253.13 102.569 li252.957 103.12 li252.785 103.671 li252.577 104.222 li252.335 104.739 li252.058 105.255 li251.746 105.737 li251.436 106.218 li251.055 106.667 li250.674 107.114 li250.259 107.562 li249.844 107.974 li249.36 108.353 li248.876 108.731 li248.391 109.075 li247.872 109.386 li247.354 109.661 li246.8 109.937 li246.212 110.177 li245.659 110.384 li245.036 110.591 li244.448 110.763 li243.791 110.899 li243.134 111.003 li242.477 111.106 li241.785 111.142 li241.093 111.21 li240.366 111.21 li239.813 111.21 li239.225 111.175 li238.671 111.106 li238.153 111.038 li237.599 110.935 li237.08 110.831 li236.596 110.692 li236.112 110.521 li235.628 110.349 li235.143 110.142 li234.693 109.937 li234.244 109.694 li233.794 109.419 li233.344 109.144 li232.895 108.835 li232.48 108.491 li232.48 110.28 li224.628 110.28 li224.628 99.3345 lief277.309 110.28 mo267.243 110.28 li258.837 83.983 li255.724 83.983 li255.724 74.6548 li271.705 74.6548 li271.705 83.983 li268.834 83.983 li272.673 97.9576 li278.9 74.6548 li287.616 74.6548 li293.842 97.9576 li297.716 83.983 li294.845 83.983 li294.845 74.6548 li310.792 74.6548 li310.792 83.983 li307.678 83.983 li299.273 110.28 li289.208 110.28 li283.258 89.7662 li277.309 110.28 lief322.898 88.8365 mo338.844 88.8365 li338.636 88.149 li338.394 87.4595 li338.084 86.8404 li337.772 86.2544 li337.392 85.7388 li336.976 85.2232 li336.527 84.7759 li336.007 84.3619 li335.489 84.0181 li334.901 83.7076 li334.313 83.4322 li333.69 83.2271 li333.033 83.0533 li332.307 82.9166 li331.581 82.8482 li330.82 82.813 li330.127 82.8482 li329.435 82.9166 li328.779 83.0533 li328.156 83.2271 li327.534 83.4322 li326.946 83.7076 li326.392 84.0181 li325.873 84.397 li325.354 84.8091 li324.87 85.2916 li324.455 85.774 li324.074 86.2896 li323.728 86.8755 li323.418 87.4947 li323.14 88.149 li322.898 88.8365 licp348.529 99.6783 mo348.218 100.368 li347.907 101.021 li347.561 101.642 li347.18 102.261 li346.799 102.845 li346.419 103.431 li346.004 103.981 li345.589 104.497 li345.14 105.015 li344.655 105.53 li344.171 106.013 li343.687 106.46 li343.168 106.907 li342.615 107.354 li342.061 107.733 li341.473 108.146 li340.885 108.491 li340.297 108.835 li339.674 109.144 li339.086 109.454 li338.429 109.73 li337.806 109.97 li337.149 110.177 li336.493 110.384 li335.8 110.556 li335.143 110.728 li334.452 110.866 li333.725 110.968 li333.033 111.038 li332.307 111.106 li331.581 111.142 li330.82 111.142 li329.782 111.106 li328.779 111.071 li327.81 110.968 li326.876 110.796 li325.942 110.624 li325.042 110.384 li324.143 110.108 li323.314 109.798 li322.483 109.454 li321.653 109.075 li320.857 108.628 li320.096 108.146 li319.335 107.595 li318.609 107.044 li317.882 106.425 li317.191 105.737 li316.534 105.083 li315.911 104.36 li315.323 103.671 li314.804 102.915 li314.32 102.157 li313.871 101.366 li313.456 100.54 li313.075 99.7134 li312.763 98.8873 li312.487 97.9927 li312.245 97.1314 li312.037 96.2369 li311.899 95.3072 li311.794 94.3443 li311.726 93.4146 li311.691 92.4166 li311.726 91.4517 li311.794 90.524 li311.899 89.5591 li312.037 88.6646 li312.245 87.7701 li312.487 86.8755 li312.763 85.9791 li313.109 85.1529 li313.49 84.2935 li313.871 83.5025 li314.355 82.7095 li314.838 81.9185 li315.358 81.1958 li315.911 80.4732 li316.534 79.7837 li317.191 79.0962 li317.882 78.4771 li318.575 77.856 li319.335 77.3052 li320.096 76.7896 li320.892 76.3072 li321.722 75.8599 li322.552 75.4478 li323.418 75.0689 li324.316 74.7252 li325.215 74.4498 li326.115 74.2076 li327.048 74.0025 li327.948 73.8638 li328.916 73.7271 li329.851 73.6919 li330.82 73.6568 li332.03 73.6919 li333.241 73.7955 li333.829 73.8638 li334.416 73.9673 li335.005 74.0708 li335.558 74.2076 li336.146 74.3462 li336.7 74.5181 li337.252 74.69 li337.806 74.897 li338.36 75.1041 li338.879 75.3443 li339.432 75.5845 li339.951 75.8267 li340.47 76.1353 li340.989 76.4107 li341.473 76.7212 li341.958 77.0298 li342.442 77.3755 li342.891 77.7193 li343.341 78.0982 li343.791 78.4771 li344.206 78.8541 li344.621 79.2681 li345.036 79.6802 li345.416 80.0943 li345.796 80.5416 li346.142 80.9888 li346.489 81.4712 li346.834 81.9537 li347.215 82.5376 li347.561 83.1236 li347.873 83.7076 li348.183 84.2935 li348.46 84.9126 li348.703 85.5318 li348.945 86.1861 li349.152 86.8052 li349.326 87.4595 li349.463 88.149 li349.602 88.8365 li349.706 89.524 li349.774 90.2134 li349.844 90.9361 li349.878 91.6939 li349.878 92.4166 li349.878 92.6568 li349.878 92.8638 li349.878 93.1041 li349.878 93.3462 li349.844 93.5865 li349.844 93.8267 li349.844 94.0689 li349.809 94.3091 li349.774 94.5494 li349.774 94.8248 li349.74 95.0669 li349.706 95.3423 li349.671 95.6177 li349.636 95.8931 li349.602 96.1685 li349.567 96.4439 li323.14 96.4439 li323.314 97.0279 li323.555 97.5787 li323.832 98.0962 li324.143 98.6119 li324.524 99.0591 li324.939 99.5064 li325.389 99.9205 li325.873 100.298 li326.426 100.608 li326.98 100.919 li327.568 101.159 li328.191 101.366 li328.813 101.538 li329.47 101.642 li330.127 101.71 li330.82 101.71 li331.2 101.71 li331.581 101.71 li331.961 101.642 li332.307 101.606 li332.653 101.538 li332.999 101.435 li333.344 101.331 li333.656 101.228 li334.001 101.091 li334.313 100.952 li334.625 100.78 li334.936 100.608 li335.247 100.401 li335.558 100.196 li335.87 99.9537 li336.181 99.6783 li348.529 99.6783 lief355.758 100.884 mo355.758 83.983 li351.677 83.983 li351.677 74.6548 li365.375 74.6548 li365.375 79.8189 li365.755 79.0962 li366.17 78.4771 li366.585 77.856 li367.035 77.3052 li367.554 76.8248 li368.039 76.3423 li368.591 75.9302 li369.179 75.5513 li369.767 75.2408 li370.39 74.9302 li371.083 74.69 li371.774 74.483 li372.535 74.3111 li373.331 74.2076 li374.161 74.1041 li375.026 74.0708 li375.026 83.9498 li374.437 83.983 li373.849 84.0513 li373.295 84.1216 li372.742 84.2252 li372.223 84.3267 li371.74 84.4302 li371.254 84.5689 li370.805 84.7056 li370.39 84.8775 li369.975 85.0494 li369.595 85.2564 li369.214 85.4634 li368.868 85.7037 li368.557 85.9458 li368.246 86.1861 li367.968 86.4615 li367.692 86.772 li367.45 87.0806 li367.243 87.3912 li367.035 87.7701 li366.828 88.149 li366.655 88.5259 li366.481 88.94 li366.343 89.3873 li366.24 89.8697 li366.101 90.3502 li366.032 90.8326 li365.962 91.3482 li365.893 91.899 li365.859 92.4849 li365.825 93.0708 li365.825 93.6548 li365.825 100.884 li369.941 100.884 li369.941 110.28 li351.227 110.28 li351.227 100.884 li355.758 100.884 lief382.669 100.884 mo382.669 73.4517 li378.312 73.4517 li378.312 64.0884 li392.701 64.0884 li392.701 91.0044 li400.103 83.399 li396.056 83.399 li396.056 74.6548 li414.32 74.6548 li414.32 83.983 li410.446 83.983 li403.147 91.6236 li410.341 100.884 li415.426 100.884 li415.426 110.28 li405.326 110.28 li392.701 94.3091 li392.701 110.28 li378.104 110.28 li378.104 100.884 li382.669 100.884 lief24.0748 36.6226 mo28.3985 36.6226 li28.3985 46.191 li8.33594 46.191 li8.33594 36.6226 li12.6597 36.6226 li12.6597 9.5 li8.33594 9.5 li8.33594 15.7989 li0 15.7989 li0 0 li36.7691 0 li36.7691 15.7989 li28.3985 15.7989 li28.3985 9.5 li24.0748 9.5 li24.0748 36.6226 lief48.9795 24.7476 mo64.96 24.7476 li64.7525 24.025 li64.4756 23.3711 li64.1993 22.7515 li63.8531 22.1666 li63.4727 21.6158 li63.0577 21.1338 li62.608 20.6861 li62.1236 20.2735 li61.5704 19.8946 li61.0166 19.585 li60.4288 19.3096 li59.7715 19.1031 li59.1143 18.9307 li58.4224 18.8277 li57.6963 18.7588 li56.9351 18.7247 li56.2085 18.7588 li55.5518 18.8277 li54.8941 18.9307 li54.2374 19.1031 li53.649 19.3438 li53.0611 19.6192 li52.5074 19.9292 li51.9542 20.3077 li51.4351 20.7208 li50.9854 21.168 li50.5362 21.65 li50.1553 22.2007 li49.8096 22.7857 li49.4981 23.4053 li49.2212 24.0591 li48.9795 24.7476 licp74.6104 35.5899 mo74.2994 36.2437 li73.9878 36.898 li73.6421 37.5171 li73.296 38.1368 li72.9156 38.7564 li72.5352 39.3072 li72.1202 39.858 li71.6705 40.4087 li71.2208 40.9249 li70.771 41.441 li70.2867 41.8887 li69.7681 42.3707 li69.2491 42.8179 li68.7305 43.231 li68.1768 43.6441 li67.5889 44.0225 li67.0005 44.4009 li66.4126 44.7452 li65.7901 45.0552 li65.1675 45.3306 li64.545 45.606 li63.8877 45.8467 li63.2652 46.0879 li62.5733 46.294 li61.9161 46.4664 li61.2242 46.6041 li60.5323 46.7418 li59.8404 46.8448 li59.1143 46.9483 li58.3877 46.9825 li57.6617 47.0171 li56.9351 47.0513 li55.8975 47.0171 li54.8941 46.9483 li53.9258 46.8448 li52.9571 46.7071 li52.0235 46.5005 li51.1241 46.294 li50.2593 46.0191 li49.3946 45.709 li48.5645 45.3648 li47.7686 44.9517 li46.9732 44.5044 li46.212 44.0225 li45.4512 43.5064 li44.6905 42.921 li43.9981 42.3018 li43.272 41.6475 li42.6148 40.9595 li42.0269 40.271 li41.4385 39.5479 li40.92 38.7911 li40.4009 38.0337 li39.9512 37.2422 li39.5362 36.4502 li39.1905 35.6241 li38.8448 34.7637 li38.5679 33.9034 li38.3257 33.0084 li38.1529 32.1133 li37.98 31.1841 li37.876 30.2549 li37.8072 29.2911 li37.8072 28.3272 li37.8072 27.3638 li37.876 26.4 li38.0142 25.4708 li38.1529 24.5411 li38.3604 23.6465 li38.6026 22.7515 li38.879 21.8912 li39.1905 21.0303 li39.5708 20.2042 li39.9859 19.3785 li40.4356 18.5865 li40.92 17.8296 li41.4732 17.0723 li42.0269 16.3838 li42.6495 15.6612 li43.272 15.0069 li43.9639 14.3531 li44.6905 13.7681 li45.4166 13.2173 li46.212 12.6666 li46.9732 12.1846 li47.8033 11.7374 li48.6334 11.3243 li49.5328 10.9459 li50.3975 10.6358 li51.2969 10.3262 li52.1963 10.085 li53.1304 9.91309 li54.064 9.74073 li54.9981 9.6377 li55.9664 9.56885 li56.9351 9.53418 li58.1456 9.56885 li59.3565 9.67188 li59.9444 9.7754 li60.4981 9.84424 li61.086 9.98194 li61.6739 10.085 li62.2271 10.2227 li62.7808 10.3951 li63.3687 10.5669 li63.8877 10.7735 li64.441 10.98 li64.9947 11.2208 li65.5132 11.462 li66.0669 11.7374 li66.586 12.0127 li67.0704 12.3223 li67.5889 12.6324 li68.0733 12.9419 li68.5577 13.2862 li69.0074 13.6304 li69.4571 13.9747 li69.8716 14.3531 li70.3213 14.7315 li70.7364 15.1451 li71.1172 15.5577 li71.4976 16.0054 li71.878 16.4527 li72.2584 16.9004 li72.6045 17.3819 li72.9156 17.8638 li73.296 18.4146 li73.6421 18.9996 li73.9878 19.585 li74.2994 20.2042 li74.5416 20.7896 li74.8184 21.4434 li75.0254 22.063 li75.233 22.7168 li75.4063 23.3711 li75.5792 24.025 li75.6827 24.7134 li75.7867 25.4019 li75.8907 26.1246 li75.9249 26.8472 li75.9595 27.5704 li75.9942 28.3272 li75.9942 28.5337 li75.9942 28.775 li75.9595 29.0157 li75.9595 29.2222 li75.9595 29.4634 li75.9595 29.7042 li75.9249 29.9449 li75.9249 30.2203 li75.8907 30.4615 li75.856 30.7022 li75.8213 30.9776 li75.8213 31.253 li75.7867 31.5284 li75.752 31.8038 li75.7178 32.0792 li75.6827 32.3545 li49.2559 32.3545 li49.4292 32.9395 li49.671 33.4903 li49.9136 34.0064 li50.2593 34.4883 li50.605 34.9703 li51.0201 35.3834 li51.4698 35.7964 li51.9888 36.1749 li52.542 36.5191 li53.0958 36.7945 li53.6836 37.0699 li54.2715 37.2764 li54.8941 37.4141 li55.5518 37.5171 li56.2432 37.586 li56.9351 37.6207 li57.3155 37.6207 li57.6963 37.586 li58.042 37.5518 li58.3877 37.483 li58.7681 37.4141 li59.1143 37.3453 li59.4258 37.2422 li59.7715 37.1045 li60.0831 37.001 li60.4288 36.8292 li60.7398 36.6915 li61.0513 36.4849 li61.3628 36.2784 li61.6739 36.0718 li61.9854 35.8306 li62.2969 35.5899 li74.6104 35.5899 lief115.877 33.1807 mo115.635 33.9722 li115.393 34.7637 li115.116 35.521 li114.805 36.2784 li114.493 36.9664 li114.147 37.6895 li113.767 38.3433 li113.352 38.9976 li112.937 39.6168 li112.487 40.2364 li112.003 40.8213 li111.519 41.3721 li110.965 41.8887 li110.446 42.4048 li109.858 42.921 li109.27 43.3687 li108.647 43.816 li108.025 44.2291 li107.368 44.6075 li106.71 44.9864 li106.019 45.296 li105.327 45.606 li104.601 45.8814 li103.874 46.1221 li103.148 46.3287 li102.387 46.5352 li101.591 46.6729 li100.796 46.8106 li99.9996 46.9136 li99.1695 46.9825 li98.3047 47.0171 li97.4747 47.0513 li96.4371 47.0171 li95.4341 46.9483 li94.4654 46.8448 li93.5313 46.7071 li92.5977 46.5005 li91.6983 46.2598 li90.7989 45.9844 li89.9341 45.6749 li89.1036 45.3306 li88.274 44.9175 li87.4781 44.4703 li86.7168 43.9883 li85.9561 43.4717 li85.2295 42.921 li84.5035 42.3018 li83.8116 41.6475 li83.1544 40.9595 li82.5318 40.271 li81.9786 39.5479 li81.4249 38.7911 li80.9405 38.0337 li80.4908 37.2422 li80.0757 36.4502 li79.73 35.6241 li79.3838 34.7637 li79.1075 33.9034 li78.8653 33.0084 li78.6924 32.1133 li78.5191 31.1841 li78.4156 30.2549 li78.3462 29.2911 li78.3462 28.3272 li78.3462 27.3638 li78.4156 26.4 li78.5191 25.4708 li78.6924 24.5411 li78.8653 23.6465 li79.1075 22.7857 li79.3838 21.9253 li79.6954 21.0992 li80.0416 20.2735 li80.4561 19.4815 li80.9058 18.69 li81.3902 17.9327 li81.9434 17.1753 li82.5318 16.4185 li83.1544 15.6954 li83.8116 15.0069 li84.4688 14.3531 li85.126 13.7681 li85.8179 13.2173 li86.544 12.7012 li87.2706 12.1846 li88.0313 11.7715 li88.7925 11.3584 li89.5879 10.98 li90.3838 10.6705 li91.1792 10.3951 li92.0093 10.1539 li92.8741 9.94727 li93.7042 9.80958 li94.5689 9.70655 li95.4341 9.6377 li96.3331 9.60303 li97.025 9.6377 li97.751 9.67188 li98.4434 9.74073 li99.1002 9.87842 li99.7579 10.0162 li100.415 10.1885 li101.072 10.3951 li101.695 10.6358 li102.283 10.9112 li102.906 11.1866 li103.459 11.5308 li104.047 11.9092 li104.601 12.3223 li105.12 12.7354 li105.673 13.2173 li106.157 13.6993 li106.157 10.5328 li114.251 10.5328 li114.251 23.6465 li104.601 23.6465 li104.324 23.1299 li104.013 22.6827 li103.701 22.2354 li103.355 21.8565 li102.975 21.4781 li102.594 21.1338 li102.179 20.8243 li101.764 20.5484 li101.314 20.2735 li100.865 20.0669 li100.381 19.8946 li99.8614 19.7569 li99.3423 19.6192 li98.8238 19.5503 li98.2701 19.4815 li97.6822 19.4815 li97.2325 19.4815 li96.7828 19.5162 li96.3677 19.5503 li95.9527 19.6192 li95.5376 19.7227 li95.1226 19.8257 li94.7076 19.9634 li94.3267 20.1011 li93.9463 20.2735 li93.6006 20.4795 li93.2203 20.6861 li92.8741 20.9273 li92.5279 21.168 li92.2168 21.4434 li91.9053 21.7188 li91.5596 22.0289 li91.2832 22.3384 li91.0064 22.6827 li90.7295 23.0269 li90.4874 23.3711 li90.2798 23.7496 li90.0723 24.0938 li89.8995 24.5069 li89.7266 24.8853 li89.5879 25.2642 li89.4498 25.6768 li89.3458 26.0904 li89.2769 26.5376 li89.2076 26.9507 li89.1382 27.398 li89.1036 27.8458 li89.1036 28.3272 li89.1036 28.775 li89.1382 29.2569 li89.2076 29.7042 li89.2422 30.1172 li89.3458 30.5645 li89.4498 30.9776 li89.5533 31.3907 li89.7266 31.8038 li89.8648 32.1822 li90.0376 32.5611 li90.2452 32.9395 li90.4527 33.2837 li90.6949 33.628 li90.9371 33.9722 li91.2139 34.3165 li91.525 34.626 li91.8018 34.9361 li92.148 35.211 li92.459 35.4864 li92.8047 35.7276 li93.1163 35.9341 li93.462 36.1407 li93.8428 36.3472 li94.1885 36.5191 li94.5689 36.6568 li94.9498 36.7945 li95.3643 36.898 li95.7452 37.001 li96.1602 37.0699 li96.6099 37.1045 li97.025 37.1387 li97.4747 37.1387 li97.9937 37.1387 li98.5469 37.0699 li99.0655 37.001 li99.5845 36.898 li100.069 36.7256 li100.554 36.5538 li101.003 36.3472 li101.453 36.106 li101.902 35.8306 li102.283 35.5552 li102.664 35.211 li103.009 34.8672 li103.355 34.4883 li103.667 34.0752 li103.943 33.628 li104.186 33.1807 li115.877 33.1807 lief122.138 36.7598 mo122.138 9.36231 li117.779 9.36231 li117.779 0 li132.204 0 li132.204 14.7315 li132.653 14.1465 li133.137 13.5958 li133.622 13.0796 li134.141 12.6324 li134.694 12.1846 li135.247 11.8062 li135.835 11.4278 li136.458 11.1177 li137.081 10.8423 li137.738 10.6016 li138.395 10.3951 li139.087 10.2227 li139.813 10.085 li140.574 10.0162 li141.335 9.94727 li142.131 9.91309 li142.857 9.94727 li143.584 9.98194 li144.241 10.0508 li144.933 10.1539 li145.555 10.2574 li146.178 10.4292 li146.8 10.6016 li147.389 10.8077 li147.942 11.0489 li148.461 11.2901 li148.98 11.5997 li149.499 11.9092 li149.983 12.2535 li150.432 12.6324 li150.848 13.0108 li151.263 13.4581 li151.643 13.9058 li152.023 14.3877 li152.37 14.8692 li152.681 15.3858 li152.958 15.9366 li153.234 16.5215 li153.441 17.1065 li153.684 17.7261 li153.857 18.3799 li154.03 19.0342 li154.168 19.7569 li154.272 20.4454 li154.341 21.2027 li154.41 21.9595 li154.445 22.7515 li154.48 23.5777 li154.48 36.7598 li159.01 36.7598 li159.01 46.191 li144.068 46.191 li144.068 26.5718 li144.068 25.6084 li143.999 24.7134 li143.895 23.8873 li143.756 23.1299 li143.584 22.4761 li143.341 21.8565 li143.238 21.5811 li143.099 21.3404 li142.926 21.0992 li142.788 20.8926 li142.615 20.6861 li142.442 20.4795 li142.234 20.3077 li142.027 20.1358 li141.819 19.9981 li141.578 19.8604 li141.335 19.7569 li141.059 19.6192 li140.505 19.4473 li139.882 19.3096 li139.191 19.2408 li138.464 19.2061 li137.772 19.2408 li137.115 19.3438 li136.77 19.4126 li136.493 19.4815 li136.181 19.585 li135.87 19.7227 li135.593 19.8604 li135.316 19.9981 li135.074 20.1358 li134.833 20.3418 li134.556 20.5142 li134.348 20.7208 li134.106 20.9615 li133.898 21.2027 li133.691 21.4434 li133.483 21.7188 li133.31 21.9942 li133.137 22.2696 li132.86 22.8892 li132.619 23.543 li132.411 24.2315 li132.307 24.9542 li132.204 25.7461 li132.204 26.5718 li132.204 36.7598 li136.285 36.7598 li136.285 46.191 li117.572 46.191 li117.572 36.7598 li122.138 36.7598 lief167.658 36.7598 mo167.658 19.8946 li163.265 19.8946 li163.265 10.5328 li177.24 10.5328 li177.24 15.2481 li177.689 14.5943 li178.173 14.0088 li178.692 13.4239 li179.211 12.9073 li179.765 12.4258 li180.353 11.9781 li180.94 11.5997 li181.563 11.2554 li182.221 10.9459 li182.913 10.6705 li183.604 10.4292 li184.331 10.2574 li185.092 10.1197 li185.887 10.0162 li186.717 9.94727 li187.548 9.91309 li188.308 9.94727 li189 9.98194 li189.692 10.0508 li190.384 10.1539 li191.006 10.2574 li191.664 10.4292 li192.252 10.6016 li192.84 10.8077 li193.393 11.0489 li193.947 11.3243 li194.465 11.5997 li194.95 11.9092 li195.434 12.2535 li195.884 12.6324 li196.334 13.0455 li196.748 13.4581 li197.129 13.9058 li197.509 14.3877 li197.821 14.9039 li198.167 15.42 li198.443 15.9708 li198.72 16.5562 li198.928 17.1412 li199.17 17.7608 li199.342 18.4146 li199.516 19.0684 li199.654 19.7569 li199.758 20.4795 li199.861 21.2027 li199.896 21.9595 li199.965 22.7515 li199.965 23.5777 li199.965 36.7598 li204.531 36.7598 li204.531 46.191 li189.588 46.191 li189.588 26.5718 li189.554 25.6084 li189.485 24.7134 li189.381 23.8873 li189.242 23.1299 li189.069 22.4761 li188.828 21.8565 li188.724 21.5811 li188.585 21.3404 li188.447 21.0992 li188.274 20.8926 li188.101 20.6861 li187.928 20.4795 li187.72 20.3077 li187.513 20.1358 li187.305 19.9981 li187.063 19.8604 li186.821 19.7569 li186.544 19.6192 li185.991 19.4473 li185.368 19.3096 li184.676 19.2408 li183.95 19.2061 li183.258 19.2408 li182.601 19.3438 li182.29 19.4126 li181.978 19.4815 li181.668 19.585 li181.39 19.7227 li181.114 19.8604 li180.837 19.9981 li180.56 20.1358 li180.318 20.3418 li180.076 20.5142 li179.834 20.7208 li179.591 20.9615 li179.384 21.2027 li179.177 21.4434 li179.003 21.7188 li178.796 21.9942 li178.658 22.2696 li178.347 22.8892 li178.104 23.543 li177.932 24.2315 li177.793 24.9542 li177.724 25.7461 li177.689 26.5718 li177.689 36.7598 li181.806 36.7598 li181.806 46.191 li163.092 46.191 li163.092 36.7598 li167.658 36.7598 lief212.625 36.7598 mo212.625 19.8946 li208.267 19.8946 li208.267 10.5328 li222.726 10.5328 li222.726 36.7598 li227.257 36.7598 li227.257 46.191 li208.129 46.191 li208.129 36.7598 li212.625 36.7598 licp212.625 8.57081 mo212.625 0 li222.726 0 li222.726 8.57081 li212.625 8.57081 lief230.889 35.211 mo240.54 35.211 li240.608 35.6929 li240.643 36.106 li240.747 36.5191 li240.885 36.898 li241.023 37.2422 li241.231 37.5518 li241.439 37.8614 li241.681 38.1026 li241.958 38.3433 li242.269 38.5499 li242.58 38.7217 li242.96 38.8594 li243.341 38.9629 li243.756 39.066 li244.206 39.1006 li244.656 39.1006 li245.105 39.1006 li245.521 39.066 li245.935 38.9976 li246.281 38.8941 li246.627 38.7911 li246.938 38.6534 li247.215 38.481 li247.492 38.3091 li247.7 38.1026 li247.907 37.8614 li248.08 37.586 li248.218 37.3106 li248.322 37.001 li248.391 36.6915 li248.426 36.3472 li248.46 35.9683 li248.426 35.6929 li248.391 35.4522 li248.288 35.1768 li248.149 34.9361 li247.976 34.6949 li247.769 34.4883 li247.526 34.2476 li247.25 34.0411 li246.938 33.8345 li246.558 33.6622 li246.177 33.4556 li245.763 33.2837 li245.278 33.1119 li244.759 32.9395 li244.24 32.8018 li243.652 32.6641 li243.168 32.5264 li242.753 32.4234 li242.338 32.3199 li241.958 32.2168 li241.611 32.148 li241.266 32.0445 li240.954 31.9756 li240.678 31.8726 li239.467 31.4937 li238.326 31.0811 li237.772 30.8746 li237.253 30.6334 li236.769 30.3926 li236.285 30.1514 li235.835 29.876 li235.385 29.6011 li234.971 29.3257 li234.59 29.0503 li234.209 28.7403 li233.863 28.4307 li233.518 28.1207 li233.206 27.7764 li232.93 27.4327 li232.653 27.0884 li232.411 26.7095 li232.168 26.3311 li231.961 25.9527 li231.753 25.5396 li231.581 25.1265 li231.407 24.7134 li231.269 24.2657 li231.166 23.8184 li231.062 23.3365 li230.993 22.8545 li230.923 22.3731 li230.854 21.8912 li230.819 21.3746 li230.819 20.8243 li230.854 20.2042 li230.889 19.6192 li230.958 19.0342 li231.027 18.4488 li231.166 17.8985 li231.304 17.3477 li231.477 16.7969 li231.685 16.2803 li231.892 15.7989 li232.168 15.3169 li232.445 14.835 li232.756 14.3877 li233.068 13.94 li233.448 13.5269 li233.829 13.1138 li234.244 12.7012 li234.659 12.3223 li235.109 11.9781 li235.593 11.6685 li236.078 11.3584 li236.562 11.0835 li237.08 10.8077 li237.634 10.6016 li238.187 10.3951 li238.741 10.1885 li239.329 10.0508 li239.952 9.91309 li240.574 9.80958 li241.197 9.70655 li241.854 9.67188 li242.545 9.6377 li243.203 9.60303 li243.756 9.6377 li244.31 9.6377 li244.829 9.70655 li245.347 9.74073 li245.832 9.80958 li246.316 9.91309 li246.766 10.0162 li247.215 10.1539 li247.665 10.2916 li248.08 10.4639 li248.53 10.6358 li248.945 10.877 li249.36 11.0835 li249.775 11.3243 li250.19 11.5997 li250.57 11.9092 li250.57 10.3951 li258.042 10.3951 li258.042 20.5142 li248.564 20.5142 li248.495 20.1011 li248.391 19.7227 li248.288 19.3438 li248.184 19.0342 li248.045 18.7247 li247.872 18.4834 li247.7 18.2422 li247.526 18.0362 li247.319 17.8638 li247.112 17.7261 li246.834 17.5884 li246.593 17.4854 li246.281 17.3819 li245.97 17.3477 li245.625 17.313 li245.278 17.2789 li244.897 17.313 li244.552 17.3477 li244.206 17.3819 li243.895 17.4854 li243.584 17.5884 li243.307 17.7261 li243.03 17.8638 li242.788 18.0362 li242.58 18.2422 li242.373 18.4488 li242.234 18.6558 li242.096 18.8965 li241.992 19.1373 li241.923 19.3785 li241.889 19.6539 li241.854 19.9634 li241.889 20.3077 li241.923 20.6519 li241.992 20.9615 li242.13 21.2715 li242.269 21.5469 li242.442 21.8223 li242.649 22.063 li242.926 22.2696 li243.238 22.4761 li243.618 22.6827 li244.102 22.9234 li244.725 23.1299 li245.382 23.3711 li246.177 23.6119 li247.042 23.8526 li248.011 24.0938 li249.602 24.5411 li251.089 25.023 li251.781 25.2642 li252.438 25.5049 li253.061 25.7803 li253.649 26.021 li254.203 26.2969 li254.722 26.5718 li255.24 26.8472 li255.69 27.1226 li256.14 27.4327 li256.52 27.7081 li256.9 28.0176 li257.211 28.3272 li257.523 28.6373 li257.8 28.9815 li258.077 29.3257 li258.318 29.7042 li258.561 30.0826 li258.734 30.4957 li258.941 30.9087 li259.114 31.3565 li259.252 31.8038 li259.391 32.251 li259.495 32.733 li259.564 33.2491 li259.633 33.7657 li259.702 34.2818 li259.737 34.8326 li259.737 35.3834 li259.702 36.0372 li259.668 36.6568 li259.598 37.2764 li259.495 37.8614 li259.391 38.4468 li259.218 39.0318 li259.045 39.5826 li258.803 40.0987 li258.561 40.6495 li258.318 41.1314 li258.007 41.6475 li257.696 42.0953 li257.315 42.5772 li256.935 43.0245 li256.52 43.4376 li256.105 43.8506 li255.621 44.2637 li255.136 44.6075 li254.652 44.9517 li254.133 45.2618 li253.58 45.5713 li253.061 45.8467 li252.473 46.0879 li251.885 46.294 li251.297 46.4664 li250.674 46.6387 li250.051 46.7764 li249.395 46.9136 li248.737 46.9825 li248.045 47.0513 li247.354 47.086 li246.627 47.086 li246.039 47.086 li245.485 47.0513 li244.932 47.0171 li244.379 46.9483 li243.86 46.8448 li243.341 46.7071 li242.822 46.6041 li242.338 46.4322 li241.854 46.2598 li241.404 46.0533 li240.92 45.8467 li240.47 45.5713 li240.021 45.3306 li239.605 45.0206 li239.156 44.711 li238.741 44.3668 li238.741 46.191 li230.889 46.191 li230.889 35.211 lief300.276 33.1807 mo300.035 33.9722 li299.792 34.7637 li299.515 35.521 li299.204 36.2784 li298.893 36.9664 li298.512 37.6895 li298.166 38.3433 li297.751 38.9976 li297.336 39.6168 li296.886 40.2364 li296.402 40.8213 li295.918 41.3721 li295.365 41.8887 li294.845 42.4048 li294.257 42.921 li293.669 43.3687 li293.046 43.816 li292.424 44.2291 li291.767 44.6075 li291.11 44.9864 li290.418 45.296 li289.726 45.606 li289 45.8814 li288.274 46.1221 li287.547 46.3287 li286.786 46.5352 li285.991 46.6729 li285.195 46.8106 li284.399 46.9136 li283.57 46.9825 li282.705 47.0171 li281.875 47.0513 li280.836 47.0171 li279.834 46.9483 li278.865 46.8448 li277.931 46.7071 li276.998 46.5005 li276.098 46.2598 li275.199 45.9844 li274.334 45.6749 li273.503 45.3306 li272.673 44.9175 li271.877 44.4703 li271.083 43.9883 li270.356 43.4717 li269.629 42.921 li268.903 42.3018 li268.211 41.6475 li267.554 40.9595 li266.931 40.271 li266.378 39.5479 li265.825 38.7911 li265.34 38.0337 li264.89 37.2422 li264.476 36.4502 li264.129 35.6241 li263.784 34.7637 li263.507 33.9034 li263.265 33.0084 li263.092 32.1133 li262.919 31.1841 li262.815 30.2549 li262.746 29.2911 li262.746 28.3272 li262.746 27.3638 li262.815 26.4 li262.919 25.4708 li263.092 24.5411 li263.265 23.6465 li263.507 22.7857 li263.784 21.9253 li264.095 21.0992 li264.441 20.2735 li264.856 19.4815 li265.306 18.69 li265.79 17.9327 li266.343 17.1753 li266.931 16.4185 li267.554 15.6954 li268.211 15.0069 li268.869 14.3531 li269.526 13.7681 li270.217 13.2173 li270.944 12.7012 li271.67 12.1846 li272.397 11.7715 li273.193 11.3584 li273.988 10.98 li274.784 10.6705 li275.58 10.3951 li276.41 10.1539 li277.274 9.94727 li278.104 9.80958 li278.968 9.70655 li279.834 9.6377 li280.733 9.60303 li281.424 9.6377 li282.151 9.67188 li282.842 9.74073 li283.5 9.87842 li284.158 10.0162 li284.815 10.1885 li285.472 10.3951 li286.094 10.6358 li286.682 10.9112 li287.305 11.1866 li287.859 11.5308 li288.447 11.9092 li289 12.3223 li289.519 12.7354 li290.038 13.2173 li290.556 13.6993 li290.556 10.5328 li298.651 10.5328 li298.651 23.6465 li289 23.6465 li288.723 23.1299 li288.412 22.6827 li288.101 22.2354 li287.754 21.8565 li287.375 21.4781 li286.994 21.1338 li286.579 20.8243 li286.164 20.5484 li285.714 20.2735 li285.229 20.0669 li284.78 19.8946 li284.261 19.7569 li283.742 19.6192 li283.223 19.5503 li282.635 19.4815 li282.083 19.4815 li281.632 19.4815 li281.183 19.5162 li280.767 19.5503 li280.353 19.6192 li279.937 19.7227 li279.522 19.8257 li279.107 19.9634 li278.727 20.1011 li278.346 20.2735 li278 20.4795 li277.62 20.6861 li277.274 20.9273 li276.928 21.168 li276.617 21.4434 li276.271 21.7188 li275.96 22.0289 li275.682 22.3384 li275.406 22.6827 li275.129 23.0269 li274.887 23.3711 li274.68 23.7496 li274.472 24.0938 li274.299 24.5069 li274.126 24.8853 li273.988 25.2642 li273.849 25.6768 li273.746 26.0904 li273.676 26.5376 li273.607 26.9507 li273.539 27.398 li273.503 27.8458 li273.503 28.3272 li273.503 28.775 li273.539 29.2569 li273.573 29.7042 li273.642 30.1172 li273.746 30.5645 li273.849 30.9776 li273.954 31.3907 li274.091 31.8038 li274.264 32.1822 li274.437 32.5611 li274.645 32.9395 li274.853 33.2837 li275.094 33.628 li275.336 33.9722 li275.614 34.3165 li275.925 34.626 li276.202 34.9361 li276.513 35.211 li276.859 35.4864 li277.17 35.7276 li277.516 35.9341 li277.862 36.1407 li278.243 36.3472 li278.588 36.5191 li278.968 36.6568 li279.349 36.7945 li279.764 36.898 li280.145 37.001 li280.56 37.0699 li280.975 37.1045 li281.424 37.1387 li281.875 37.1387 li282.393 37.1387 li282.947 37.0699 li283.465 37.001 li283.985 36.898 li284.469 36.7256 li284.953 36.5538 li285.403 36.3472 li285.852 36.106 li286.267 35.8306 li286.682 35.5552 li287.063 35.211 li287.409 34.8672 li287.754 34.4883 li288.066 34.0752 li288.343 33.628 li288.584 33.1807 li300.276 33.1807 lief305.879 36.7598 mo305.879 9.36231 li301.522 9.36231 li301.522 0 li315.946 0 li315.946 14.7315 li316.395 14.1465 li316.879 13.5958 li317.364 13.0796 li317.882 12.6324 li318.436 12.1846 li318.99 11.8062 li319.578 11.4278 li320.2 11.1177 li320.823 10.8423 li321.48 10.6016 li322.137 10.3951 li322.864 10.2227 li323.555 10.085 li324.316 10.0162 li325.078 9.94727 li325.873 9.91309 li326.599 9.94727 li327.326 9.98194 li328.017 10.0508 li328.675 10.1539 li329.297 10.2574 li329.92 10.4292 li330.542 10.6016 li331.13 10.8077 li331.684 11.0489 li332.238 11.2901 li332.756 11.5997 li333.241 11.9092 li333.725 12.2535 li334.174 12.6324 li334.589 13.0108 li335.005 13.4581 li335.385 13.9058 li335.765 14.3877 li336.112 14.8692 li336.423 15.3858 li336.7 15.9366 li336.976 16.5215 li337.184 17.1065 li337.426 17.7261 li337.599 18.3799 li337.772 19.0342 li337.911 19.7569 li338.014 20.4454 li338.084 21.2027 li338.152 21.9595 li338.187 22.7515 li338.222 23.5777 li338.222 36.7598 li342.788 36.7598 li342.788 46.191 li327.81 46.191 li327.81 26.5718 li327.81 25.6084 li327.741 24.7134 li327.637 23.8873 li327.499 23.1299 li327.326 22.4761 li327.084 21.8565 li326.98 21.5811 li326.841 21.3404 li326.668 21.0992 li326.53 20.8926 li326.357 20.6861 li326.184 20.4795 li325.977 20.3077 li325.769 20.1358 li325.561 19.9981 li325.32 19.8604 li325.078 19.7569 li324.801 19.6192 li324.248 19.4473 li323.625 19.3096 li322.933 19.2408 li322.207 19.2061 li321.515 19.2408 li320.857 19.3438 li320.546 19.4126 li320.235 19.4815 li319.923 19.585 li319.647 19.7227 li319.335 19.8604 li319.093 19.9981 li318.817 20.1358 li318.575 20.3418 li318.333 20.5142 li318.09 20.7208 li317.848 20.9615 li317.641 21.2027 li317.433 21.4434 li317.225 21.7188 li317.052 21.9942 li316.879 22.2696 li316.603 22.8892 li316.361 23.543 li316.188 24.2315 li316.049 24.9542 li315.946 25.7461 li315.946 26.5718 li315.946 36.7598 li320.062 36.7598 li320.062 46.191 li301.348 46.191 li301.348 36.7598 li305.879 36.7598 lief355.136 24.7476 mo371.083 24.7476 li370.875 24.025 li370.632 23.3711 li370.321 22.7515 li370.009 22.1666 li369.629 21.6158 li369.214 21.1338 li368.73 20.6861 li368.246 20.2735 li367.727 19.8946 li367.139 19.585 li366.551 19.3096 li365.928 19.1031 li365.236 18.9307 li364.544 18.8277 li363.818 18.7588 li363.057 18.7247 li362.366 18.7588 li361.673 18.8277 li361.016 18.9307 li360.394 19.1031 li359.771 19.3438 li359.183 19.6192 li358.629 19.9292 li358.076 20.3077 li357.592 20.7208 li357.108 21.168 li356.693 21.65 li356.278 22.2007 li355.932 22.7857 li355.621 23.4053 li355.378 24.0591 li355.136 24.7476 licp380.733 35.5899 mo380.456 36.2437 li380.11 36.898 li379.764 37.5171 li379.418 38.1368 li379.038 38.7564 li378.658 39.3072 li378.243 39.858 li377.827 40.4087 li377.377 40.9249 li376.893 41.441 li376.409 41.8887 li375.925 42.3707 li375.406 42.8179 li374.852 43.231 li374.299 43.6441 li373.71 44.0225 li373.123 44.4009 li372.535 44.7452 li371.913 45.0552 li371.29 45.3306 li370.666 45.606 li370.044 45.8467 li369.387 46.0879 li368.73 46.294 li368.039 46.4664 li367.38 46.6041 li366.689 46.7418 li365.962 46.8448 li365.271 46.9483 li364.544 46.9825 li363.818 47.0171 li363.057 47.0513 li362.019 47.0171 li361.016 46.9483 li360.048 46.8448 li359.08 46.7071 li358.18 46.5005 li357.246 46.294 li356.381 46.0191 li355.517 45.709 li354.721 45.3648 li353.891 44.9517 li353.095 44.5044 li352.334 44.0225 li351.573 43.5064 li350.847 42.921 li350.121 42.3018 li349.428 41.6475 li348.772 40.9595 li348.149 40.271 li347.561 39.5479 li347.042 38.7911 li346.558 38.0337 li346.108 37.2422 li345.693 36.4502 li345.312 35.6241 li345.001 34.7637 li344.724 33.9034 li344.483 33.0084 li344.275 32.1133 li344.136 31.1841 li344.033 30.2549 li343.963 29.2911 li343.929 28.3272 li343.963 27.3638 li344.033 26.4 li344.136 25.4708 li344.275 24.5411 li344.483 23.6465 li344.724 22.7515 li345.001 21.8912 li345.347 21.0303 li345.693 20.2042 li346.108 19.3785 li346.558 18.5865 li347.077 17.8296 li347.595 17.0723 li348.149 16.3838 li348.772 15.6612 li349.428 15.0069 li350.121 14.3531 li350.813 13.7681 li351.573 13.2173 li352.334 12.6666 li353.13 12.1846 li353.925 11.7374 li354.791 11.3243 li355.655 10.9459 li356.554 10.6358 li357.419 10.3262 li358.353 10.085 li359.252 9.91309 li360.186 9.74073 li361.155 9.6377 li362.088 9.56885 li363.057 9.53418 li364.268 9.56885 li365.479 9.67188 li366.067 9.7754 li366.655 9.84424 li367.208 9.98194 li367.796 10.085 li368.349 10.2227 li368.937 10.3951 li369.491 10.5669 li370.044 10.7735 li370.598 10.98 li371.117 11.2208 li371.67 11.462 li372.189 11.7374 li372.708 12.0127 li373.227 12.3223 li373.71 12.6324 li374.195 12.9419 li374.679 13.2862 li375.128 13.6304 li375.579 13.9747 li376.028 14.3531 li376.444 14.7315 li376.859 15.1451 li377.239 15.5577 li377.654 16.0054 li378 16.4527 li378.38 16.9004 li378.726 17.3819 li379.073 17.8638 li379.453 18.4146 li379.799 18.9996 li380.11 19.585 li380.421 20.2042 li380.699 20.7896 li380.94 21.4434 li381.182 22.063 li381.355 22.7168 li381.529 23.3711 li381.701 24.025 li381.839 24.7134 li381.943 25.4019 li382.012 26.1246 li382.082 26.8472 li382.117 27.5704 li382.117 28.3272 li382.117 28.5337 li382.117 28.775 li382.117 29.0157 li382.117 29.2222 li382.082 29.4634 li382.082 29.7042 li382.047 29.9449 li382.047 30.2203 li382.012 30.4615 li382.012 30.7022 li381.978 30.9776 li381.943 31.253 li381.909 31.5284 li381.875 31.8038 li381.839 32.0792 li381.805 32.3545 li355.378 32.3545 li355.551 32.9395 li355.793 33.4903 li356.07 34.0064 li356.381 34.4883 li356.762 34.9703 li357.177 35.3834 li357.626 35.7964 li358.111 36.1749 li358.665 36.5191 li359.218 36.7945 li359.806 37.0699 li360.394 37.2764 li361.051 37.4141 li361.673 37.5171 li362.366 37.586 li363.057 37.6207 li363.438 37.6207 li363.818 37.586 li364.165 37.5518 li364.544 37.483 li364.89 37.4141 li365.236 37.3453 li365.582 37.2422 li365.893 37.1045 li366.24 37.001 li366.551 36.8292 li366.862 36.6915 li367.173 36.4849 li367.485 36.2784 li367.796 36.0718 li368.108 35.8306 li368.418 35.5899 li380.733 35.5899 lief384.675 35.211 mo394.327 35.211 li394.361 35.6929 li394.43 36.106 li394.534 36.5191 li394.672 36.898 li394.811 37.2422 li395.019 37.5518 li395.226 37.8614 li395.468 38.1026 li395.745 38.3433 li396.056 38.5499 li396.368 38.7217 li396.713 38.8594 li397.128 38.9629 li397.543 39.066 li397.994 39.1006 li398.443 39.1006 li398.893 39.1006 li399.307 39.066 li399.722 38.9976 li400.069 38.8941 li400.415 38.7911 li400.726 38.6534 li401.002 38.481 li401.28 38.3091 li401.487 38.1026 li401.694 37.8614 li401.868 37.586 li402.005 37.3106 li402.109 37.001 li402.179 36.6915 li402.213 36.3472 li402.248 35.9683 li402.213 35.6929 li402.144 35.4522 li402.075 35.1768 li401.936 34.9361 li401.763 34.6949 li401.556 34.4883 li401.314 34.2476 li401.037 34.0411 li400.726 33.8345 li400.345 33.6622 li399.964 33.4556 li399.515 33.2837 li399.065 33.1119 li398.546 32.9395 li397.994 32.8018 li397.44 32.6641 li396.956 32.5264 li396.541 32.4234 li396.126 32.3199 li395.745 32.2168 li395.399 32.148 li395.053 32.0445 li394.742 31.9756 li394.465 31.8726 li393.254 31.4937 li392.113 31.0811 li391.559 30.8746 li391.041 30.6334 li390.556 30.3926 li390.072 30.1514 li389.623 29.876 li389.172 29.6011 li388.757 29.3257 li388.377 29.0503 li387.997 28.7403 li387.651 28.4307 li387.305 28.1207 li386.994 27.7764 li386.716 27.4327 li386.44 27.0884 li386.198 26.7095 li385.956 26.3311 li385.749 25.9527 li385.541 25.5396 li385.368 25.1265 li385.195 24.7134 li385.056 24.2657 li384.953 23.8184 li384.849 23.3365 li384.745 22.8545 li384.71 22.3731 li384.641 21.8912 li384.607 21.3746 li384.607 20.8243 li384.641 20.2042 li384.675 19.6192 li384.745 19.0342 li384.814 18.4488 li384.953 17.8985 li385.091 17.3477 li385.264 16.7969 li385.472 16.2803 li385.679 15.7989 li385.956 15.3169 li386.232 14.835 li386.509 14.3877 li386.855 13.94 li387.201 13.5269 li387.616 13.1138 li388.031 12.7012 li388.447 12.3223 li388.896 11.9781 li389.38 11.6685 li389.865 11.3584 li390.348 11.0835 li390.868 10.8077 li391.421 10.6016 li391.974 10.3951 li392.528 10.1885 li393.116 10.0508 li393.739 9.91309 li394.361 9.80958 li394.984 9.70655 li395.641 9.67188 li396.298 9.6377 li396.99 9.60303 li397.543 9.6377 li398.097 9.6377 li398.616 9.70655 li399.134 9.74073 li399.619 9.80958 li400.103 9.91309 li400.552 10.0162 li401.002 10.1539 li401.452 10.2916 li401.868 10.4639 li402.317 10.6358 li402.732 10.877 li403.147 11.0835 li403.562 11.3243 li403.977 11.5997 li404.358 11.9092 li404.358 10.3951 li411.829 10.3951 li411.829 20.5142 li402.351 20.5142 li402.282 20.1011 li402.179 19.7227 li402.075 19.3438 li401.971 19.0342 li401.833 18.7247 li401.66 18.4834 li401.487 18.2422 li401.314 18.0362 li401.106 17.8638 li400.899 17.7261 li400.622 17.5884 li400.345 17.4854 li400.069 17.3819 li399.757 17.3477 li399.412 17.313 li399.031 17.2789 li398.685 17.313 li398.339 17.3477 li397.994 17.3819 li397.682 17.4854 li397.371 17.5884 li397.094 17.7261 li396.817 17.8638 li396.575 18.0362 li396.368 18.2422 li396.16 18.4488 li396.021 18.6558 li395.883 18.8965 li395.779 19.1373 li395.71 19.3785 li395.641 19.6539 li395.641 19.9634 li395.675 20.3077 li395.71 20.6519 li395.779 20.9615 li395.918 21.2715 li396.056 21.5469 li396.229 21.8223 li396.437 22.063 li396.713 22.2696 li396.99 22.4761 li397.406 22.6827 li397.889 22.9234 li398.477 23.1299 li399.169 23.3711 li399.964 23.6119 li400.83 23.8526 li401.798 24.0938 li403.389 24.5411 li404.876 25.023 li405.568 25.2642 li406.225 25.5049 li406.848 25.7803 li407.436 26.021 li407.99 26.2969 li408.508 26.5718 li409.028 26.8472 li409.477 27.1226 li409.892 27.4327 li410.307 27.7081 li410.687 28.0176 li410.999 28.3272 li411.31 28.6373 li411.586 28.9815 li411.864 29.3257 li412.106 29.7042 li412.314 30.0826 li412.521 30.4957 li412.728 30.9087 li412.902 31.3565 li413.04 31.8038 li413.178 32.251 li413.282 32.733 li413.351 33.2491 li413.42 33.7657 li413.49 34.2818 li413.49 34.8326 li413.524 35.3834 li413.49 36.0372 li413.455 36.6568 li413.385 37.2764 li413.282 37.8614 li413.143 38.4468 li413.005 39.0318 li412.833 39.5826 li412.59 40.0987 li412.348 40.6495 li412.106 41.1314 li411.794 41.6475 li411.449 42.0953 li411.103 42.5772 li410.722 43.0245 li410.307 43.4376 li409.858 43.8506 li409.408 44.2637 li408.923 44.6075 li408.44 44.9517 li407.92 45.2618 li407.367 45.5713 li406.813 45.8467 li406.26 46.0879 li405.672 46.294 li405.084 46.4664 li404.461 46.6387 li403.838 46.7764 li403.181 46.9136 li402.525 46.9825 li401.833 47.0513 li401.141 47.086 li400.415 47.086 li399.827 47.086 li399.273 47.0513 li398.719 47.0171 li398.166 46.9483 li397.647 46.8448 li397.128 46.7071 li396.609 46.6041 li396.126 46.4322 li395.641 46.2598 li395.191 46.0533 li394.708 45.8467 li394.257 45.5713 li393.808 45.3306 li393.392 45.0206 li392.943 44.711 li392.528 44.3668 li392.528 46.191 li384.675 46.191 li384.675 35.211 lief530.854 57.2398 mo530.68 59.4771 li530.369 61.7486 li529.919 63.9517 li529.332 66.1548 li528.605 68.3228 li527.74 70.4576 li526.703 72.522 li525.561 74.5181 li524.247 76.481 li522.794 78.3384 li521.203 80.1275 li519.473 81.815 li517.571 83.399 li515.565 84.9126 li513.385 86.2896 li506.952 96.9595 li502.974 90.3853 li502.04 90.5572 li501.072 90.7291 li500.103 90.9009 li499.134 91.0044 li498.166 91.108 li497.197 91.1763 li496.229 91.2115 li495.26 91.2115 li494.257 91.2115 li493.289 91.1763 li492.32 91.108 li491.351 91.0044 li490.382 90.9009 li489.415 90.7291 li488.446 90.5572 li487.512 90.3853 li483.534 96.9595 li477.101 86.2896 li474.956 84.9126 li472.916 83.399 li471.012 81.815 li469.283 80.1275 li467.692 78.3384 li466.239 76.481 li464.925 74.5181 li463.783 72.522 li462.746 70.4576 li461.881 68.3228 li461.154 66.1548 li460.566 63.9517 li460.117 61.7486 li459.806 59.4771 li459.632 57.2398 li459.632 54.9678 li459.736 52.6963 li460.013 50.459 li460.394 48.2217 li460.947 46.0191 li461.639 43.8506 li462.469 41.7164 li463.437 39.6514 li464.544 37.6207 li465.79 35.6587 li467.208 33.7999 li468.73 31.9756 li470.39 30.2891 li472.223 28.6714 li474.161 27.1573 li476.27 25.7461 li478.484 24.4722 li478.484 16.5904 li512.001 16.5904 li512.001 24.4722 li514.25 25.7461 li516.326 27.1573 li518.262 28.6714 li520.096 30.2891 li521.756 31.9756 li523.278 33.7999 li524.697 35.6587 li525.941 37.6207 li527.048 39.6514 li528.017 41.7164 li528.847 43.8506 li529.539 46.0191 li530.092 48.2217 li530.473 50.459 li530.75 52.6963 li530.888 54.9678 li530.854 57.2398 licp551.019 53.1094 mo550.951 51.7666 li550.846 50.459 li539.328 48.5318 li539.155 47.4644 li538.913 46.3628 li538.671 45.296 li538.394 44.2291 li538.082 43.1963 li537.771 42.1294 li537.425 41.0967 li537.044 40.0645 li546.039 32.6641 li545.485 31.4595 li544.897 30.2891 li544.274 29.1192 li543.617 27.9488 li542.925 26.813 li542.234 25.7115 li541.507 24.6099 li540.747 23.5088 li529.816 27.5704 li529.089 26.7095 li528.363 25.8838 li527.602 25.0918 li526.84 24.3003 li526.045 23.543 li525.25 22.7857 li524.419 22.063 li523.554 21.3404 li527.636 10.4639 li526.564 9.70655 li525.422 8.98389 li524.316 8.29542 li523.174 7.60694 li521.999 6.95313 li520.822 6.3335 li519.646 5.74805 li518.435 5.19776 li510.999 14.1465 li509.961 13.7681 li508.923 13.4239 li507.851 13.1138 li506.813 12.8042 li505.741 12.5289 li504.668 12.2881 li503.596 12.0816 li502.49 11.875 li500.552 0.413086 li499.238 0.310059 li497.889 0.241211 li496.575 0.172364 li495.26 0.172364 li493.912 0.172364 li492.597 0.241211 li491.248 0.310059 li489.933 0.413086 li487.996 11.875 li486.924 12.0816 li485.817 12.2881 li484.745 12.5289 li483.672 12.8042 li482.634 13.1138 li481.563 13.4239 li480.525 13.7681 li479.487 14.1465 li472.05 5.19776 li470.839 5.74805 li469.664 6.3335 li468.488 6.95313 li467.312 7.60694 li466.169 8.29542 li465.063 8.98389 li463.957 9.70655 li462.849 10.4639 li466.931 21.3404 li466.067 22.063 li465.236 22.7857 li464.44 23.543 li463.645 24.3003 li462.884 25.0918 li462.123 25.8838 li461.396 26.7095 li460.705 27.5704 li449.74 23.5088 li448.979 24.6099 li448.252 25.7115 li447.561 26.813 li446.869 27.9488 li446.211 29.1192 li445.588 30.2891 li445 31.4595 li444.448 32.6641 li453.441 40.0645 li453.06 41.0967 li452.714 42.1294 li452.403 43.1963 li452.092 44.2291 li451.815 45.296 li451.573 46.3628 li451.366 47.4644 li451.158 48.5318 li439.639 50.459 li439.536 51.7666 li439.466 53.1094 li439.432 54.417 li439.397 55.7598 li439.432 57.0674 li439.466 58.3755 li439.536 59.7178 li439.639 61.0259 li451.158 62.9537 li451.366 64.0552 li451.573 65.1216 li451.815 66.188 li452.092 67.2554 li452.403 68.3228 li452.714 69.356 li453.06 70.3873 li453.441 71.4205 li444.448 78.8208 li445 80.0259 li445.588 81.1958 li446.211 82.3658 li446.869 83.5357 li447.561 84.6724 li448.252 85.774 li448.979 86.9087 li449.74 87.9752 li460.705 83.9146 li461.396 84.7759 li462.123 85.6002 li462.884 86.3931 li463.645 87.1841 li464.44 87.9419 li465.236 88.6998 li466.067 89.4224 li466.931 90.1451 li462.849 101.021 li463.957 101.778 li465.063 102.501 li466.169 103.19 li467.312 103.878 li468.488 104.532 li469.664 105.151 li470.839 105.737 li472.05 106.288 li479.487 97.3384 li480.525 97.7173 li481.563 98.0611 li482.634 98.4048 li483.672 98.6802 li484.745 98.9556 li485.817 99.1958 li486.924 99.438 li487.996 99.6099 li489.933 111.071 li491.248 111.175 li492.597 111.243 li493.912 111.313 li495.26 111.313 li496.575 111.313 li497.889 111.243 li499.238 111.175 li500.552 111.071 li502.49 99.6099 li503.596 99.438 li504.668 99.1958 li505.741 98.9556 li506.813 98.6802 li507.851 98.4048 li508.923 98.0611 li509.961 97.7173 li510.999 97.3384 li518.435 106.288 li519.646 105.737 li520.822 105.151 li521.999 104.532 li523.174 103.878 li524.316 103.19 li525.422 102.501 li526.564 101.778 li527.636 101.021 li523.554 90.1451 li524.419 89.4224 li525.25 88.6998 li526.045 87.9419 li526.84 87.1841 li527.602 86.3931 li528.363 85.6002 li529.089 84.7759 li529.816 83.9146 li540.747 87.9752 li541.507 86.9087 li542.234 85.774 li542.925 84.6724 li543.617 83.5357 li544.274 82.3658 li544.897 81.1958 li545.485 80.0259 li546.039 78.8208 li537.044 71.4205 li537.425 70.3873 li537.771 69.356 li538.082 68.3228 li538.394 67.2554 li538.671 66.188 li538.913 65.1216 li539.155 64.0552 li539.328 62.9537 li550.846 61.0259 li550.951 59.7178 li551.019 58.3755 li551.088 57.0674 li551.088 55.7598 li551.088 54.417 li551.019 53.1094 lif510.411 18.1739 mo480.11 18.1739 li480.11 26.1246 li487.546 26.1246 li487.546 24.5069 li491.525 24.5069 li491.525 39.3414 li489.933 39.3414 li489.933 45.709 li500.552 45.709 li500.552 39.3414 li498.961 39.3414 li498.961 24.5411 li502.974 24.5411 li502.974 26.1246 li510.411 26.1246 li510.411 18.1739 lief478.76 30.358 mo478.76 36.7256 li480.386 36.7256 li480.386 62.127 li478.76 62.0928 li478.76 68.4605 li489.415 68.4605 li489.415 62.0928 li487.824 62.0928 li487.824 55.7598 li502.697 55.7598 li502.697 62.0928 li501.106 62.0928 li501.106 68.4605 li511.725 68.4605 li511.725 62.0928 li510.133 62.0928 li510.133 36.6915 li511.725 36.7256 li511.725 30.358 li501.106 30.358 li501.106 36.7256 li502.697 36.7256 li502.697 49.3921 li487.824 49.3921 li487.824 36.7256 li489.415 36.7256 li489.415 30.358 li478.76 30.358 lief495.26 74.4498 mo506.952 93.8267 li522.275 68.4263 li526.081 68.4263 li526.081 62.0928 li513.351 62.0928 li513.351 68.4263 li514.838 68.4263 li506.952 81.5044 li495.225 62.0928 li483.534 81.5044 li475.682 68.4263 li477.169 68.4263 li477.169 62.0928 li464.406 62.0928 li464.406 68.4263 li468.246 68.4263 li483.569 93.8267 li495.26 74.4498 lief%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 11.0.0%%For: (Ines Jantzen) (graphodata AG)%%Title: (logo_thw_weiss.eps)%%CreationDate: 01.09.2006 15:21 Uhr%AI9_DataStream%Gb!U'I</c9FXFV*!8dfW>M>6a,3\`I[o;mR7%&nOP-("6`3Ykr$7(+s0EM7j!6UTlrUf]Oe(s0g5D$7$Rs8"k61R>!Hi*KKT@4m1%o_J17WtuRRY<K`#e#uPq4q2'b9r4H$l;'V?kT;Il4l"n0EgBl[BQpmbhqOI'>l0/Y]!Ka]J*;gVkAO]LY3s$7\UK";]mXpLH$sc2%l][Anq_J->o]#H2o_R_Cq;#aKgOOu"f\iB>cX.]AIEK;4r8lK#bI9,7hcua;5J6d^FoV+dISkRPhnM8.h=Wtfrqb.;:HnUN^]2l6%Y+tiC+91XckI7pUrl(A!%Ti](X5<WX0=-&t]>L-0S+F7Ml`:"CH0"#bbL8*S0@/N^hFV?T=0)>P]3h-&2uK#khnK22bD5ZQVB=Rb%s7G>o!os;EEVTRam,?jkGCLN+,<teE2dbJV?@JNUe!TuM]s`.RGlPhJ,c:)._s97JkB@/6\^m,81qM7fR_NX]^+O6`cEc?_Bh2kH%J#9ZFL!n[hh83=^J!&l/M%;gX*<,a!dsjKM^Gt#i)LlpOpYEf\qdS./pI@l.If&j0E:Zk,(O(;U4J4$ZnFcI4_kf\Ip?C[!QIS_=%InG@^cYm,1meX*!^3khbk[3$8=20+ZqQ'3p%QC[@n:BK33F$u^rQjih-deiuXUhCJKn!uQ3TkGJ>k4dM-#A$Xa7X^1Aek"#GSOOA%^/4\&I+.iKmr'gb?!R@)'Bae9dJcY#.4md^_p-/Y[7a0mM#?1=cDp\I)ul+.pBe@A4'_"uaq*D0q"FBeX7M659?u/<rr9BUr:<;U%mMG&1k8hfalRVJ&e'ENS_]d_0Ij*`_cM6'2IQi$4ck,\Z#l&6Bph^<-gS[j;ZojU0>4jnupk`$3UK,T8T8n-(L,Q0-9l&B%p_0c5%6S&'D5LJc<'=<)V"A_4,K&8\9Ji6DsijV^Uk)?415/lu_5*]cVa3n>ZO*jfRM^QR66TFlI5LBgJ_G@PUR)V\YG8Lp@U('SFT,@<i%$$d:r_GC(;,Jm6h8`iV$N"P"r`f336@SHQobbfb0XY;C*7%:)MJW9=gcXi,J(1ig$;kB599CJ_GdPpt_H9Tnn[#k=7$KK$"]Lc.#%7P2B='uQYWL%1-;Q<B>_0g>NR^G%]OJ,GP&"2Rd?_YEV!<`+$sbc?+5?Q=Cm4WjQ6XI8]VAf\!ahT!4LaJJXp\b&P/.rQKp,q[,d%BS4]lSVbbQBc4>V(?<;.[$(BIn]@<BZhTA8(u<;(@qUk/,;U]SOPN(nnCT7$\"Vuj;e.P?F"u6Fk$<9\ZS(.#GsfouMN"f3hpH1d%?/@3[bO=OWl+*<Xg!-hb1,ncYVu0?amlKk,bfNB8['#TMk%X42g"g/qYPj6Sf,bhXIBE(-jg>T^d?mKf]k1dHFnBm*=5GH'3k+WD%r$bUml$qR5Dq:QO?]=REor%_3nki#2X?Yg];WQa$:\h1pq0/t$gK":NlneI^qG[Cjr,_].qG[ATq<3_i"Bg5sJ%tf=r-SAks)%?l%U$#N>r02>hIuf*$T7))N5)JOg(JccXJ)S_f1@JolML=N\hd!hpc]Z%+\UFu2ic]:I0#:h"^QRL!^[jCTO1p#eN0sYEiHNneou.Z5%lcJVjS,1#]QZ)c)ro*#9m@,c4?='7Or7R"oB8=s]:2^W?o#kC2Ia!<85<lnF>eN+%]t?His69$R8)Ngsr:9F<e]moZ+"s4XIX^n^%p;bYNYHKVV9B>i^?,&V:\[]46>^l6n^V)eFqt'.>(N7];1jD$1s"B.sTDj4_qs*\^Ifi!pk3D\Br@^AVqsr?WDgR,shgBcnHhS>)%Xik&>rmKsGQS8?/^@U0%%dVbK^3aqro>UOed1>VopOSt5jn5tGbDY-,lO*oZ^V=FOAO<V(DWaYV]6\UF\9S#5gT+D2X*`\#lJh!E%-bBSD^V;9<>p!8I;p^$l+$Pq4b6MsXphA@%:B.k#_@7'HUN_+j"*f+=pNfnPhHntXju;dA4P1CL_qgsRqFToll+^L7Hm0*B_<Zm)%*kP33H2Kf(`=Fg$%CCo&?S8r1qrr%&Y5`acJ"6N7jPtagmdC#<`VIc:J,@d\VnY<CI5q2;P>As*kSh`T[+S3(IkjusTDIHZ4W.GA%Dbl\1oS6fM5Q4mebQ$qU+&Cq]f;JZFDqjN7NrJ"l'?L*$G]E<=2s7kuVgj2:qIs<1r[3'FLU?pPhEcU3IbEi_"$?%tZ]fU4V!-7o%aTM1)k@Q7e5P_M;l.>l`s1SI$\,US,^NL-;h>&'1I.R1#jQOcoZ34N?gtqG\rP9b``F#t(DNeGL&]AJa2hh-emXahO\TW.pU;Br[%piQGGD[64+i]4Bao:'+JhgbFtX5A&RPQ1FQIt+//qhFt8Y.snbl,S:"I<j?^I"EGAI?XW0n$8"'3<&fIcS+0jK6I+UQi3Dc?f1hQ%7Xt="B/_d4a*R7OE-M;UGPqJd#M`\<JY18,0$^(p_OPZD\'U!3oKN1CcGJJB2U?m>r:Qp#EG9K4gR<kfFl$@cH[CO.rZ-L]G7Vab%lV?(o=i?Ht%pmm!*n%dCGint\r:p<%])CT5(O</js8>"tRm-`LfOYn0Gdnak`NOdjYi58'Gl+s23/lhb5%HbSQ+N]M]l2N[EC/M@%=3iL4PBMG&;e8JhE&1a*GBMrbqo<o'IJ'aGpeMmakl(ON]AP?8"b4^NjT?lE5PEiuJ,E+&J@Cj]ci8L2r]$#.Y2A(u5L=QG2`[a^%HiC]a*.G@m^HJ)orpB(E@jLK/pC:dp&-''Bo?4DTr-5_rp#Gqg;Wlh<E8b_O7&0>aL\8]G(O&*XG>p$%^.tO'N=ANBs):r`Y4&r<%psn?bS[de<^MKg?IXZ_D[kk=F"8Eho[%/rMJ"4pcqf/*TVp67I"-?7?m^"R;4.ShL)ST"^3kp"6pAEJ"oUG/*Dr9@)\pWG*S&=XP%k3'YHpP1uhSc7cj`SL?rMp%#?V.hrdOQHf%l1rT[Zg74P(T5Rsio!RML/dp(QEP09A%_8IqeY\ZjJ/pIDX(:.hV6J#i4X!"4lG6/%S*d[;IXcQ_IWbPM]W^Ym?i&q<?C]kYr:r%5BhWk8I<5DME79=4qX#R27$P<#gE;kso_Z+ADr0?AIX;Q'rPbBTP%4_MB_TsCRBI.1%5JH<;D7BLS0:cGA<p+[^54SdjUdlC(FOfLKle]0R0Gj%ps4=G-md;\<2i#l.hS-Z#+$TJS[o]d4c(+cC>?$4jqK-[,hOPPgkh`Q]%>Gf`\:4=(es5M;BftAH!?XDOEK3k2-rhNJ`a/ls7J$JX/cbAao^Up'nGb<^io\#SgSDWrKp>=_Uo>T0+f<=*(=gf^?G[!#k_n04?%[aocVn@Q0UqBS2:^:LrT(@1_L__:ms^2*\:f?XrrGeLc"4?VKk?[fY4ro<sCG44]W@%I;#\*"USkuWY4&!qTM%$fL@?d:O@iC&+b%oATLN5<$p60@-hn5MYb?8,B[)]XU"mhK=GA@4cEdDQ\IMggA9PNLsQa]]nSlk,U^hU@8Le<f]K8ArsamT+<l!?m;1![]dpHl^J]G%(D$9!l)2;.^>&V?;M][hqp"reR)-P%9Y]bclVN#@=N%*r05b[R`6`X66$^iDr9ESDDXLZ\M@UVbft+lQO5aTc[o^o5e"hm+S[c?-%?ts+Wn>A3X9<^DLL#1bac&9("BlNs`2a"k3;uM%PYfRr)E.-7qe",jX8&(lPf-t\'*A'A1g/Dt]M.8,Um^Fb3Gf/?'4hCK.AF1IG%q;/%`X*m(I`9oS_&YXZ/a5;+*Ss-$8g8N?R*R.iM[^enJhpLlWn>asjT-&R9ZO<9j*T0"?^51mUQb9uB41jmerK2Z)ac">$2_V?^%,s&KXUtP&d*3(]8FLkhmrojh4_;":B0@*$Jpu(9n9DSI8ep#_a5.Kuk=&A#^]VBJE&Vh1sHi3ui9s6dSp$D>V[,(EOiS(%Y"i=p8%2ihfnZiah'`8UX^nSO,[D`U7q\9`H!^+\B2OW8;VJS:N/TADTd(Pe@8[mj"S:5mm$IpP@O]BBCq]a]Z961/tn2fIXlISZFR%lr5+%q9=i(].T*Q!VY.P6CZ`mc`\BON7-k5jmsYH*@GXNm/6Enp@ANtqsfecLK<"cYK"0qD56P[7c;\Tc1UJCj-pIZqKfpPnbVCoO12^7%\`g?AHhQgtbF>ge83ORIJ,[pWD$QtdF+*f(Tg?jjlAk>=^(]BK*2(9WMn@U(DsfF&GI?Q]c>Vg<%qp:fq#6lPSuH#kZ%anA[hl6N%hDa8/hV=VuhgB7DT[AgkK\[[jUPs$_`t)rt/VB+sm(F[?2d0utl?3s.;7b93>p*uocbm3c[l<Zh+ZJBMerq,%5hj6f8pb2L4&=PC%Z^I5[A!@<p?:[u9,D<<\HG@[RHZuHkhRn.(mOt<&IW;fCpBu<]SBf;f*g$\EZ2Y=n3udI[T9o7=?*HV"a$.m2nE#3>dkW'DrA8O<%,jVeap_9aY#AI?03hlE%q;$B-r(WL`Df-)1gWd?#N0^q;?+fDIoBN7JOZCJcrQN#;3kkW;r="7(Aop[%m>ZSdc$-)#^Sg>a/5Fp]%/#_6qh;"Rpq%g$hUGaKJl5soh?[tf=.Bu4Q9,F#BLm@)NIhq(\kO1/IB\1cOnGQ7PhV%$QCG:"clj6>h:XiA5XYgi@W!s,QH,O[0%Zh7U00*B,V`>*5(@*ZfO>Ru%O5I+kIKl=\MqEpnH?]8Dbbr/K;s3TqXHZ>keh>:^AKRN3FlT\]IN"D3;5'qH91oKC!lg\U0Co@kn%de#C[2FM/5+ZJf#BuG@7-JA=#REGC;Ict&-\\E;CmlgT8biZT/=*Gb`hU?pKs5i_Y=`!PFN)oo'Vc+X_FE);L3[(&^C6.Slj-el2%q"""H/QJe9)n7KriI#\F7[t82j6T"Ejpu:;+9/BekpLria*DK57`RaZ.bh<$4%T_UJD$QL=eRWDjE>Y707EUWA"WTj*XCe+_C9Tu%&MqnJhBCs/8*paQq2dO_I;sCZcbIB_oZfCcs69M%r^)7u]AEHo>="nXhY<#c^DN/[)boppNL(`<DM7b.M6;LbT0,sm_$:sucXBl<%d_\oShRro*qt^*t3kNu#5AHnF2?!533m#+V;g^fEYaVmmFm/)7p$44<rUKaHVsb_8F1q1MDr5%uHfp$R^X$Tfc6q3Lhdu3nO+)S"%nbVSCS"K[kYLPd&_C1W.Omf2prm:s3?i0Ck,M%l2IK$/KD)CXU#<hj4Q=G:aYaYk2mrKn:j!0Pu^:q1-raVSj_bo84+(a>Spt`%O%\8hQ-L]9F7J*ctAQ)Pm_m7"%XJ+R(rCREmrr9f+e]5h?R\JIfk]:Z#lmPm"07P91)P0':.'CGmNp$Cc"h`U4F`2WXakuUq6$l?H9%'#*p4?[gB+Ch`c6D_&uZL<9Pq=2,Y:r8D0Jr<sQ,Ilr#R+>;rlR6Ze#5Tu`,Ya*[6\$MU5Gku_pE@Y[EbPCe9A(t,p+Wna03=C_@%m4<sn*llL20qX/er)##PFr$j2_")ZWD)E<Pm'A.3("`A'bk.a-ZfYFQNgXO<3t!JYKB>jq-]_`M4UWp1SfG_nZZEKDZ$+]-LqB'9%MQLMGo<%-7R-DdraeP5Kp;(W,NkIRN5Mr'Bb5*%/1A.`%*3cgtAu<>>1[hU)Na^u$b9QI;NkJ[G\s/^8p<0.pZfo'^e(\$IhB0_r%QHr1Yr4Y*#Z2"i:mAqQTO(2d:0iROkb``Q,E?+;.rD+eilc5d1@Y['#Cgu3HIS4<XC$msh(;Q\]9(CjgAj5X24EF^ta0@Kc^\(l1%;Eg,/B-3)m3;2p=$b^2HfELXep,K1Qgp7c<@V5/mZcB?!ad!6k`@V720:tQM=Ga?F>*56;==P&lg<O`k7_;ngB!mOT22uNR^BJ(`%MrPa.<E,u<B?A>SKQ-'/:5SEi'>6`+6peFW8qLT?E,L!fhFt2C8gBX:Q&bLu#SA/<rG>b8/B1YG`Mt#>B8+hjT%32(=l4+ji"LOJ%O*O?G&S`YIILFXlE.htaJou*54hd$(q@7S(eQb5A=>ssGpK.A7Z%<'(=:6\mCY?fXC7h%@N5amNW1>p[*:D4;'WPB"Xdik_PHbcV%V>/#04rIWj]Lg1@T<G1qX''Unj/PRuee]'rY@j>CS<8V!kIIO>C:q3]cXGd&/!g]Al93:HOP_$*%KtL&pTW@!U6Tq1T_toUL*^ZS%&&:<*BnqD2*kX-OpYa`"R*56\LDA9MZE63ORVqd-B1&nPYS&\R_J$E4SG-.C$E7%A@SVfW^&dY3TsT%d'4t^Hc=oF4qB"s,.dTCS%2no$/2[Z&g+*k(0:;(%>bCs%McKVbcQ/YIbpUOhR&rp7Q;G0HPYW9O/s1VrH5<ZrtOGO7+OG'-?8d+<h"K0Ep.@*UA/7p%e&Ypf^%2@(lgO_+AI*D`P,Z-`F$m[_Q/kNdm_grBVm`6*\74bPB>*D[`q$ut`s7Qu/-1X'<kp1'J8G-Zg3R-Dd+X>?+E_>oFcG06<O@I6`7%K2re@>m_>f"@(N&JS^tFYZRKaOo[gjPJQpGEf,.(+^bm",(bO2UsiN`!nsoD,NQp($"M"JnVLAt--Eo&/p^tZ\#,O2R(pq@HmoEa%NK7,1L4M3PZ*+hm8h-2qIkiiIA#_SU9Adk,\f<@Jl\D/,,787+L5pBt.Ba[9^LOB(H+$Amd_"!TbI2??)+Uf?s13ZBF4Jm-'G\eD%9"U_u"-;*/oN7MR0)Z)PW3[#4:l876;C5@kP*\&"A%>P7&7dOXUNVO"9=md9lu;)J_ae8q_>9k-`1!:;NZj"E$g[KPALp*r*K&[H%(oP&W/[[ak2ohd'<^@Q)Z(sd1^!:b,(<.`-G>>TJdN3M@qF3#hq2I#/A7DNr]o'AFbHoa`XoOreT$rO]as`Y(9$+8TRBW=X%RoL#%=J!6ZLufHYQ5jK!0!9_i#hF?SBB/hVlHA>lZ*"=W`LJTD(fj9'>mZ3]g-eR!Ha_I(M<-,gY%&nk8$(21Z+'UjQIjY8HlkkTn8S-H%RtN5O'@d9U:,g4%Cb\t"0$T%(k=OBQ5D_W*>6,MV2Mcn3MN0Q^j94.I$cGXdgh-rjLIu#>lPhi6f#<G5/9Xc^%#^5eYoILUbjiVq%X;6p%'@'Cmqt_t0n@4L$JLV8ta-S;Ejci05aBSud2GQ&-#OPljTe:G1$j*_NWfH&_J5V]Pm>u+o'!&;k;I=`@+AcL;StM)iLqCJ!%=uaLt+ph;&SC6Ie<"!OV=t3X2d1K#$+X_4h:T-^Q4KN&ZleS5YLXBqujE7O,0CAVq3kim8R3@.XVFIYZ_Q$]Jf^c._V!&ME]Eok7%)AIcc$`Jb9?5>ZsHg;l1)t3'M;$kdX.0`0)qI\6bmd(+@#cNH2-1%nfpV^1'frg68q>T\Vd^4t)E,2pD8_!*FS`9/Z<L[6/NP,dq%eY27d#R?i48NOPf$J([?@i6]RD>h7ln^+?QT[pR!X;"ia+?9]<9L1WKYbi)cB=d]M%X%RsMenKlOI,fN8fPCmA^k_Ui]9dV*Y@0e%r+2A0\j=o#L)QQ5h&i?XFa`aQFb($bZiQVNY0Xl;UtIjU+G!6D:p6t0+3mVC"H,9@`O]:l7']_1R%X.<Bn0$Wr4!CI[oF$s[RiP9%%N(jY%^YGkPjqY06Z.H+")OJ]d&aI.3@t^!_di-Hb!C@*+]8n]U4@ff(,bFfW6_Q+pQ-AIgV9dfbj8<\DG#'K,Z_<6%fJJA1aVC'%p2*>#Z,Q[?qE2-RpS1f=&$1\??EqM@e)taB$5M_mYW?<a^?]j%FiY^6Z1%76m)6VE=A6PO?W^d?MF_'^Yr6Cr4%@2\qa?9Ta#XAq%`!4Up(^N#a5qs`-KlGO7.RS#d!L8Z==P(;V^n#N)O<7Yo!oFP(3](Ee^?N55[Nc(i'sRVOL1Zu*^h'2Qh@I_AbM^^;-qmK]L^tNt%Wk3AST@BE?(Dm<,?rJiG9=f+VD6!&'VW\la.@3LZ"P1#_QuK,qT_^;,nk]riM:!"np6ZA.%n1H=Y^>,dGjS#])7dHJ>:9<Nm"YRT%BQO'EJpN,t;\JqPEc+*a6Ys51%/'pgb)ktMV-IQQe1qE5DdQ;A'<351"J5fqdgF$aP\$UheIR4*hD(g@TbDrC%!CG9JpG$'\niGt%PhV\]7C77V1@Gjo.)E8919M+o5V3%)XDpq^k"6u_@iU\(%Kig$JUrqiJ\dXIfZ2\k-[[o(2Fpm32M0>4,o^;d4AMHa%=tg/9=ao-%%4P='gQ(A=Z,/Pe736F>*/5;!C2g!XC=;1<I=s(GG?m.R0+s&D,41[[jg*;4YYl/gMEM+[[6BhhR:(mSQFpm,"[]I1iC>/h&lg4F%aKXcj"9oeo2O,C@gbBDG3u2DrQRm/<+;]a!FKEqR-c2;b^O4$gduhIO8jCaTRSB8PeH0cNAaL,i0Kp24%EdgUEXo%1@0iC/Oc&R;%/!iTm9,-@$e$O2hN5L824/b"r.J<*;d4Qp2\\U>Hj!YbT"@Vi)&/6*h8:qpUgON6<lVm$'pdF"*U3-%43lNMW;:eC6,s_("V#XO@%2is+h3?&#3YX0AH6\eE`b_Zs\&+dAeo*ZN(`dZMOr'eSUfjP<Ch&@3nd-!FgjMFYTn!Gec^3&DN@ZJVYQn)UH@NuWQ]-F5d?a>^&%.'s]$/n,ZGs(,38$B;<UfJkr@cl`)>I^"6k]1gERSKM"CgPl(RW6lPG(-EC0oZEZ>,9ZlM0Mbdu2S$Y'cq.-$odMS3^`cfF5D@O0%/7oI)Nm7/0YUq@W=7\P6dtna@kK/X[&^X?h$L"?'?fEaB(.d8gGALae&o=<LW%Y7kV$l;.Tq.Kd8U=K.JVMRU6Q8U+J[F'a76t!p%S*)S+?Q_24[:OU9@?IuRM^@!foFo-(eHpAq432db=uiAgFDnB;#jO^i0eAj<*47AD[F<O#I4<'Oe#D>mjaF/o9]!\o;]u@G;M*-i%(iB:g/_MaPQ^hh>Z4o_ZobhgUj`SHUPaVkt6.Sf)-oNb5A>/@hM.[(Gn,t=ZR5h+]Fpp/2aWoH]P:le*Q\Vf:IXTXeQTgMDo2#)o%,F/IJ+GH3hk+?.N[J`E]Cpb>'m'GX%O=tepKGr)+1)P/ZfCs(9fp@?W7sL)>Gc,W:4mA^I''9S<4/%kY0`+&FTi*n.fk3[*L$RUm%P.7pDN!=OD2HP)>qut1M9?s+5R>3;7*2?#p'[I.a0+cW>T7FFO7jCged@SPm=AhJh1Xcq+1F*7:lu<TG/kAF9)[gj!,YQ#tS@3uc%%]mF0+jY-Q2ptaN!m)T>=8?YRer*,iJG&=e`B;E!Qo,a8%]rQ[1up53$tM#2fLuA1=,%h,1+T4:@"&d30D:_dD6=$tQlh]/,peB.%';0-*QL"V\)*K?/S-Lo&/+bgI@;)Z'p*-C:'57a5R?SgZMVL+@@TVWIogt4\>9Y0-"M#cJ!Q),2LM^/,_BMsKlILJDcmOuCYt>-1%-.eqq'SS0T4Q)-oX<D^%%%E*I^qa2PStVr6,[K@LQ:7OUO2Bj)+786Qe!)QcGcr>Xlo=@9./j6jT:g:0rDS9EV-J1bOu>\+`L.?J%Vm`'mi7-g,&S/8Yh=<tdn;0kG*U%'T6@r3P%^F2%_FMU0M+NXbPSlA>&o\nDa^ETF4UN`tI>Ic#9N>MG"c`9YbkWGl:2p%==MCMc%86t;?G#!/!,tS-3Xk7kZ\oa`k8r0T8NW^?Y3JrS`rRSd\(Bj&OREpVBIABW>.`:HeG6g>5@[I8+<@>(d-]NL\k^m3@@O(?s[j]8S%#@e;M(0_=P2TonC(?k,LP5(nR#+2=(>)$ku(_'Ts#tdqhFu/]']ru:j+hPJCBl+T'a6MR1Ygte,YkbXF/i5oHdV`6c)&<c0%Ht!D%a87U7atfqtfYps]1`%aD'!C(9/8bl2kD1<TE"@c*[7aH#H+R-k9bi5%mO=MuBur&U%q\`1@^ARkknI@TAQncD:f$5>L\Z!)Q$=>Y%@!U3RpB+CFr]/PQ"p]6$NNM!SKPkU836XM:i3u!/$=M+qibZnLYlZ)In5("#1^F:"$<m-kYQJ1)QcJm-"8refg(QcKW1G[6,\S'4%:@sR)j>^ip0g/M*`2I*c2M4LD=X,8L0,8[-;>PV2UOs&6T1Jj[oFeSH=N'R9`2k29f](s.FO;_1+J9WoZ'OFlIV>uc%MD48TcmUj%)SXi:A:DR%KIb@6)HJfM+SBfYX!lJ*Teo!],bFWAoEpK;>c]`FpN#SU!Z6Zq'UW(j_9"Y*!H't^G8[,r'$G_Vb!VX("MfE.9r/#.%4(`,XRl'dO,Sa1lFL@C/*M2WO2`Wq<:$G+`%%c'f@%kuN^C;hHq*s<ALF5<A+Y@E<C6JW.d4B(<Aj'QL/R*;P'%3)r22FG!XhTTO%0&2)FaqStkdf36o</f9.RT7=g!K<qHQ84`GOuPgg!A)G3f&a+;^Y4k)Z+P<WWN%o2p%fZ+RMGFRL,V&j0mI!,6B.OVR]1R.P7jSK%`@%TFQGF=MYh1q-()nXI@_1GK1_/%%8M.gbYf"J0\(I?V^aQ79Qdn)))(ci30pVX'\s\@?A;$Yu=1=Y]Yfl+JUS97l^G%B]Y[r2c%CU%-j`3OI8P7;7X1AMt)0a^\K>R!'/OnQ*FU^'@\Q9Ke0.T7n!LenFbWO<I!o8GO,Q5Ef1bZ)A]jV55`/d-<`/J!i<9sJ^0>I&6*%@6'7TaY:]M-`W5oE+!&tKGeJ0c9*g[[!DR1,9SkM3`8:<,,ML]k$\DP*@A$0(7W25%`<]eqeo.o]OO<tDF7YdrBhEihh@DMBl$mk%6XW2d&>r.;-Lk`u#K:'b<_QGa4;FW-@$2E6_se,hM=4Q+S$Zs*FY;c]N."SqAK(0F\3j!]@V;5]m,^U:p*fS(`1;@nN>e;\Mr;5`%(++]F&L"`([^78[$q2@W?:57Ja[2aj-[nYM#%o':b?YR>J`.k"FD2RCK6S'JWM-"[@C^0NUEe-DTuN?l6<8UCRj]2pKNX<53:83n%>UB1-`;ds@XjK1FVKUR!/J[D,2\k+18i>dd>TUPcR=U45552^,QK@>s?De^6rG!$raQco-A]G2Zk;Ma_\\^AhCeQ#Q-^*sEd#(rE%YE\=J.DoL<+m4H>Y]HeVn=LsE1KRP0f*"O-rl6>H&#%KtF;DDD46aR64H;-OJ&A\u),/mTahKa$Yp:(Gr5UL,RHeUqjh8p`?uEo'%Te@Rt]Mem)r8b@d!pG>QAZ#Z-+/35KPQ8;/C:(5Y^h@bc&tg3Pdp/(BL)Si4(LBrdGSO:'4b).A;dH/\\DRo<9je+u9$)3'hI>5j%Tpib&#[#AfLk5b!L`@22'riF[FW)OM6nG"jj>U`5nVM6?7.gPg"W-M,;>Q1o=sk_h^U;1OpEbd$O;Agj4N0NdjB7JiiQ+?mr_r*B%Z&4$<r@e(PCXOhn5AO"8c\N6u#6('\OK"o$8CN(mr^A#4-m`b2S>[?,6u<b1pH2(]0Z1k(:/t`mKeZsaW3]LC8fXnUm1&quaGTen%U8DH<i,9Qe6/cR$_SN+')S_M]^:>8DT&.t,@o"HO.N3c\F!GTLah`p-2c&?-Ta8ioeB3>46F?_i5e0`9#>L%l?rYTfR$jK>/=:_u%pp""S%:t_5coYE"d8eCjnTta7E+*=KmYT2mB!,r@r]"NVamc'O(QN"ff`tLA3;2orU$=Z)ZAg2C15i(7DE/]W<b;prC%h&:+2]e5%6"2@UL>Ne8<?Lm8G'.#@)ie?]5/q"[4,2GK*2%$7&DpVUF:s2(#0Idga:Mri@e<;cI=SH1O24!#&6tu9HGmZo46Y%nqW!t=mXl68%NkIOuCIC9bN"T@oqLmgG>u$g7jamOD\B'%B9CrLs*Xm#Xa*8<`6Vt?OSpQ985qY#(9U=EVN^7\=HUf?7VB/+U@rj=oT\4rX0+SXN%/Is#HII)?5U$\ChFK.sRRtKgQD3]WX''`@riq'EP]EZqeQep\WgW4)/)pq*)I%n?5YT\dp4lh,!"Xj%s.0Folb]02=d&>@2mnOYn%IM`kVHa\d\eY,_G*/lGQ<>M/70UE2l=D2/!l;2+VE6&#O@dP<<#4I>heC3.#Pe0HHCDHYSP40Y\:425\^S+?M%pMV_d!Gm@'H6I%%iU2""T$'LI!%m(>+W2+#a<>l;r#jrl4=,r<na`>f7BeirW!JkmPq8:C?mu,p8AWI_7'.S,%8b^0Gsj#i0ou^N;4*#bJ^u"2;9tYc%h#NmBA."k@"9p1Q3RRK9?u=,7J>PWc$2QdNQqYMp^^QK5qLkMLc3!@u:cJFYfa\9"5m.<6&NC=3dQ$=<b/$SKGH]m\Qur!eU,\rK%VLZaXM(5^WAA4e+F(Q1)8Kj96-tg>+"=H-i>SV77?0<sGq-'#E)F1<GQ68J.J2Dps6pd9S!0\C]7"Ed35VJ4:X&ukpkYrJtZ#SK=%?dbHU,F?KCMT7EmFr*;<JflkqM50`[,_?#qOVSOr2B;p5*'#JRLk'/1c6WWs6AZ_B;'N:P3Og(00k$_B8WE=4:#eF$S/?>T0rOTB%Us[>hZT"%_W3AtWA,]e8Lu[d[#oofL8IAQdGW`r"M.d"PT[PrU[Osb_Y%p$8c9q^b[VZ7<&U`uH5VnV<.W:E\)%dmAm8fC0,(4*%%)iQ)*3[@0#Frk'sO-C6S4W<GmOo=EQ_6]Q/UJ"j2T</NCK8^@F+_W.mTdW7C50^lTKJ&0gDlt7JpRK5qEs"btpTe7<42@o_BHk?k%6"D.3&u8lECE^p/;L-7dK^KZHBaSp&QQgs7g(CI18?"tNNPmKp%F89#:<bm:pol:[%Sp$%e)hiEN!YDRP:.KD9;]`0;X(i)$"4"U%k[,BE3kE/_[X%5-"-+i9NZ3X;?V-p9:R_oWS>n:./.*=OOa-$HlVFl__KD7-3E9*,`<)8_-$A5#0WgKT,l&oc*t,0H6+bY^OY!;N%)^!QH"XL'HPol_.8u:d\2rd3lM0JN`.m2q$BmB<DodpE:].+$<aX#ecpJd$C$Qq!]1[L@:,]\&24Vc6LZ:6`X/#GcLb)CUQb6P_M%rU*LK["CU]Xtn".EALA8Ls7)I#jN(j&q\_6:`_.$,A(jKZihito!kpqW:6!XD^>#^Idl,ln/!3TD=(HhOR+<aE'0<q#(goL.-!/R%"&K/SFp4<^]3*H^,nLEK$Un83Qlo.Qo\'ZBG<fW$/iBmM!nnWR@oKaC^6T.-!(,nUG__WU`)qjQ0Ti9=k+Q$4Z"oI/87sPcTd]3M%"NIPG_UE^;;,"%mWG/LQT^#,#.WTG2o*h]'[/&&_@]Uf1>q"D=J*%-<>orEW@"CWZ-t`qJFlN#XQnLL&01Ms4Ve-h(89AepQ-.-&%YZc5rggEs93M/Bl6eoB$93V!OXIko-hfZh5Yf$%!jk48Ld;AkH7UtLs]\BY)&5/Ls0]lIcL5cKeKIc:.jJ$k1)3%7['r-+4_M16e%JDh<[JkKsi63n`kS9[LOV(M///B]$$CnJ!uFO>V=[k0'Q:+T:qUj&)+<+bDH^2N-XFL^f=67@/*Y"0T9+H:b7`%1ef0hL"4+XUOt%nt'pG0WltL<u$k!WR!b[5?"pu)Cg(K749N_@IC#2i^B@YU18l0gBgFf(]I<)O<0:084&e:]n=O!N@cA#5(*N%>2AOd;5/IE71klA%,`F@3*fa2kC)a3T.R54'?X2B*Ro.%.iYTMBFaUoC"d(&:cHBAK7L)k#MGAiXMRrma^(BC+AIHY,BK:bh-h\KIX!!sd8tG"2:<nJ1%&=uB1.Ka]R\:C<8J/OKn%L)CnLsgMf'3>Ganp05f$5Mdli'W?AT0d'_!Re$B6f;=Uh&:<f5^u6;/3+,tO*OTA7>XP:lPBHoWJukJ%g*DL[K[aWA8r2_%^(-f&63&C8_k$r6(*6Y[jE8;P[)nIFM-Md"H`d[G-'ZsB=u%,MRk6m<PADnnCe3cRoG>."i/%beJV:SJjFl13%>O]7*A(R2ONMBoGL_.7*TDE(d=MiGTjAaChnnR:UQpW@d<VSA?(eJ;C'W\V+)LU&@0-/jolBr>QFqZ4Y;fVmZTo+DtM+JF=lq?CH%2L-iH3$&l]j/rV5UF:i?_qJ(aXIt='0]KWkYg\V!e(N\lbm4I.\]BqC&V8P.<#I@M>jAFjX760?DA*tGN8I4R>I,[c(oN.$'2cTX%;?J/7d#bQ0XI/c!:h(`tfAU,aLfk-6?(=ZI;:'j!a*^h%[L*ZO<5Kp<J5)ft2"_Y@*C_aG8<r+>QD&FI2'lEFVQ%M]X@V0ZNbf11%/ND^j//?_>"D_D56Brr=_*#bm(Q3hFA[gl2"Qm'4>EES[:o0)S!+>Hp;WHVU(g^rX:bcnb3eqCSBFQ6&qVDgl5<0`:_V(rfq-F4+%g./gn#<0d"mP@0J9d;u>9d0$6_+N])0\9;>fQPdp;Fqas=S9T4dIdup?%NLNX^S$kl(*L9BPeg+[bQHlNAr#Q\s@b+Qt?$3O\V>V%3PVoI38XlI0$ph_FKr;NMOJ5.4Q92M7nk(RXnX"IfrTuCOsC/4lN?`n7Oc3]SP*G(27>!T!_cVGXH\95+.t>^,_\uG]B#\eZmYuE%hhn-B!Fo_*0Z^>8B.3kiaT>18M/sTTA8EP%ok\$'?a^S4I85q[Q?8)gk@&!T!QHOjAM.s2MG)g[9,q5[.9_c!&H>g2E)DOMA"4\'%U1#fs#Ub9]g/="AquB]=),2*aOOe"FKFu/BBEG9]BXLkS?lN+.AN"PP$/_i?`'?fWT%LE?R+G']M>?MFSZM6Rj2i.UZCS(Z/pb6D%"=Y_/'qI<\?8.;7@VuqcB,ECjJboXO/R0,0\T;:.NHQ,.!ZRjaB/-U?&(jNGI<GD:Yt:Vd8T`8598K3YdVNg3AOGG-b`H\>8d^A#%E0_4B)kDYtQr.fFkfj6rV*G,:VAU4<$4[^YCXC"J89tdCP@>eG4XrIqY'R/5"-NtF/OdO^ER_VKd+!jO@Y!heRHNM@dYp`K4R<`d%<2D./2?Pai0!\"+THH^^hEL<TeZu@YA#_Glk*=$85-er>`SkV!.3PE*f4nH-J7[/SF@CIH-c5NQd=*:Y6U7`^%<N(IgN$1CdpO>O%pB]Gig"MmFFd56e;DelK+d;+K).r%^>7.Z0jF;dCW"tS!;r-u>AKV"S*#='m+)UL,T.'rHmEr2%S8>:^oR-gobt!00&0%XngC_Z"%^tBN^D%*G[Tqn/HLXDM&Z(_@Wn2-"RmBk%XOpR@=Qp*m^A"L2O@$P]+RD[l81,l(4Jh%Du-&+Zm!BL.p(`Y*-eM\J1Fn0rhpgn!(%Rd,"b)r*2<4pMj;e]UM.OH\rA.8[*B$RiTd(76L>#r(WabDs#UjAG$Ia'cq9mQMDrH18PQ%m>N$ir0l&o$qoi0-2G97&S+8nA>hg%XpE%O#f4C?KcXtp*?7k;LCb3PFOP+9,i26:!qVU(5g9Ubm&.Ni/^7roMZ=k`4I7KfGZBu-N!JaKjQOSheM.)F&P3U8#$G%<<iMV&%dNGRO^bhf'=GF0%mQ7?*/\i2e,8alSXng*_Z5gGoK#X8al(bX*MSUY;$tUEHWWt^FW&OLY'.[.I%+n!>PIa'`gL:jI(Y(kr_OY<H%VNHbO3\/G8R2QE(N!k@SUDV%X>lkTZgshTMKe(05[;[3,]R"#0)ReLX>u^e%]?A>#/F[aC(m!s2*)I*Bn>G;Pjt"YKjJj@\43$+S%)-[j<3An'AH0<6GAT$p<24'`3(2//bL++`-cUEMYieD8!6or1?XAd)cKsK1SS;'B5gPQOfCd.D-e7d'#+]^:j&M"<hCBS+bE`FD\%m*$RR>Z4@m@uOgtei22?5/hB5n7g#uNZ!$uc!<mfMA`(%HJ-dnl8K#8?8f%,;dm\.=E.^t`gpNH=AuujnAKZ,*p$r[![OILbC0X.%jYo%)WI\cgj/DD#9;A!CYuGMo@gG/=H2ijLjWnYD&9Z_)^;jupkJ4C3/%WhV-W,&;09RorS%C/d9:TMB!'RWdFPbPe[FdK]FE+gC%-[CrIZ0U5N]EQt(XP@PngbOGD($856??#JLJ;W;s^I&+/"*Jh:XDiI'e8QCSfhl8e315I/*UU8Ni0"Hl<apLcH@63k5p[!dQ+jaQ%cuPX9M;oA$TN;F#-CR3FJtR*,8mhZPM+8r'2!TO6QJS_#a"]6<P4fN#aTQ<<CSTsoP:A6F=COiN@'G3\)pjq.jV#O`R$)nclKV5u%CEaaZ,*"/61&k8PFQuD<P5&Cc^WkjaL#oBEM%WLdP$(YL?I-<[d6Zh4^;/-Vm^9?Ao/YsRl6i;S$]nhGDEA.EaiRDTH(;ei4'#(<%JMsdJ\P\[/%UP$i1moRG8r^,*^d8_NbS6QmmusOr2l``_)+p*(SMiDOeA>;&)J$D#d0E]/$-OkaZE9mc/J5#P4XlQB\=K)@BFlm<%MYQgGGX/M"MJ,fpTb4Bf+?R$TqOI:Wr<*skIDI0u"O;9Aq<XnL8>^i;Mp0[!=@,0T$GVr<#Age!HN6&2>[,eH&Kt<CT1>jf<#(QM%*[>Z"B*A[IMVO.I"@gu'9h[@YS1mnl_J6O[7UP_lEYII?V':K#()s(/P',Bg;O<DR.fdjL2&f0`0an\R3!9WoF.;#>0VVX-Iul-Y%'bs*bE?17Q\%L0Ek0ZHP^T6B#8Y2I"-_Oc(E$rf,MWCY7K3#D`-?2AlBJ<]@<&$9qSs;j8-0`]#4sLW"8n>rCm8f#HWbs4"e=rsB%7:^8A<fNrc*jg-DKU@02e\lY)FiUM$:">(dC9hHe/t[`"nKiWPTt=1hM3q$cdmD3k)/RPL=\HM6!JaET=A!r+4`+i-_H:1<E%4tL%77qBmr=n0IgO?"rG<cnH3M@i`OO]tbAEQ7(@6&G.KiJq+'*l3j16DHNS"-ja?<R2kFV2kiRoKZPb(?`p9&=86q":Lf9AJU?P8-Cl%p1^a$WF1`kW@a*Q'RP*tPPBEskcfXrb+&rbX'%*<8\Ot[_3Xsi@u[-%[SGo%bR%q(6OiL3J=.&\dq-fp+nOas&`bq&Kb_PJ-bkjF%#%TQ2M,oSUZ":N9RhRqF#%]8,6pS&1">ab["(83g!1q"FrKk/I_Ug>@.rJa:9emcd9(bK;CJtsKeZr/u@L@<[eu)S2'\Uri6[BG!%:IWJ\:+O.t<H[RAeq@f^3Z5$M(?\Q>^"$S[3\X,+=hNYPmTb_])RZVR:]sKLdYaY4p*GE7O]#WtN3iYfTeO?d>uEW$P#a^56Dte@%V;dA>-H.F:GcL19hKQN1N,=>N@G9B@CUg2cL?P_O!j!Oa_8n-U=>O"ER"kp"IOh`Ce<NA,nqn6QA?bV30`$]o\DjESP3)+B+^r]R%4rA8C&?V-c>a\ZL(i]^]V"G3u#FQs#*NEQ-9`g0bf6Vq2<lCX@N6*B1<e@Dia!_Eb=OFEMe&ql&--Sk`:`o0T)@G#1CZ9IH?4)@3%<.V!6.=&1lmWbG')(fDm6A`N'BS7+.i^-neMSZ0oZEQb_4RA6(VFRm[UV)t*gi7.m7_d.];cj&IGK)1B"Zp&7L.bY=@NLA,=90aP%l4R-J0q$&f/&6a8UR"G$J0\'18LqTbkcD#J`Im<TYQ@M"gf%;UPe9f("`eU!Pprg(aD]58Q+)?%M"bnp?pH^eD`K[/fsGO!/2+u,%<Btrq">I+gBN,p+Z-"Q3(_UG6&C<A@AkZ@HO%N?Z)*BZ`Wgp@%a_KYT.\=@:[@4+s!mIG/P*&bWG_1+EMJ$pf\si[6]a2o@.Y,Hf%Br4h7pp(W7r,`#n;8om>Y-+j`.\>aG;mN-TT:R`Xc8P24)G(*o(daOai`VCfb>qLagJ]7c"VnclHrEl3,88*'._quf)*nF.W23T^%Kp^U&.Z5gHdl9('\i6#7>!%`^W<D`P25fK%&PMO"+@dSe]&:RKcV)h#`!k,cCP,@ILhDrXX%/lRjQ2N5*QMJ)F9tMH>7qNc2.Fqm%;9XhaX#EO&1T^qk9X(N=_[I]"O@+6tAdS)-E?*$[Q7o%LdhX\)Cp.!0d=ng2^!3:nFI$io@^HInq]8DZdWRJ7V1-o_1M0&kIrlS^%V`ss&H%q1/o.+MVOh5&OOqrZOEgN4oSXn;<<a<p"\fEprD3Ec+,bCGJ"@^)Q1rp,[O?sjS/B%YjgL$'$:+[?'5,2$B-9!IUj"17t%/=l%SI3_H^VSTY'md=puC9Esq+r9]Z5WR"E8[CTu:OD/YK)h-fQa[]pKL\HJ@*Qq'UV*+Ko2N+kB[l<3Aj3'L?eWbOM*`:YR&(nD%!Z<[pj*8!AA$]-5+*C:Pi$3"=HYY8-UZ)^,oKLlTX0Lp?]AO=l@g'2#fs"dF5JRUnk,&Z?K4:>p4:Re2ToC9"FP;e,aVB>gL@-lF%'B1ldb3@cQQW]!J@hLX01NW&\%'-2$7D4@JYWs/^EhZs.eA=J7\k4dESJ&pC_`]AUU^/$jEl&(nbS$(:Zrh#UZ'k$M>Xq4r$/UUh%IH/=e@\n:g,8WKio/P^Ae:Fk]4'b<q*b.c["'nRS3:9Zk+8$#s/>qt4fd>_+V;0@Z-!l<Ep*EA<b,q)1UbEqucV0d@G0.n.2&;&0%B(<ma<TkDdZVAEFH+a4UBMiK!(+TWUgo/HNM?]0/2QO7VVBi\:2Y$#5,;E^_HdiF-E;[gPOWLTha^L*<THp&M>#$&=K$fDs5eDi3%b?9@,Vft:3IY,-NZQJQoh;HrGhF*e^U6ln>AO/o<,]NWT01fSl(f)PL5Hl9:QU]Xl5O*JYGjpl2#AbUg0]G'&&=I)T,KeFY;M"R[%5X[8N>X]g@WH_"7]DH+egdE_K>GS+rIE["sa10)tASVkk/)DVXf_7(Z:KYrG`/M[mN+e0rMY27`L=p/,,bgXQS9AS%9PSiJ6":<k%'K;scPmF?$dI^0g?`I5<SQ\EZe`q<)hfu:Bc@augK\9aJ.BM`Y)ji<$UV9(3baOTfFU55#[cg0)X]\FPC+KN[jV`3A8+C"$fYe]I%M+4!Q$,]rd>B&0112cYjmH6UTlI2]C@\$UdR@=2(e%'I?KnU@:K&1BQ%1Yr%A&a4#);K7sClf2]?"!H20mh,48Rk4%LQN%&noU$T%)\KK\lr[[jPSCtur.u],W?8'Pc1W:pQtA%MCn^8OXh/L940".+a=/eIf#+dV7QjnPM/?a1n10Xl)V`\Npr;_(k+4E^9C(7^7aC<c%ZsAi!<`YHM+-kZl=AH<e-tI33Q%d<5hX6"unJ_AOmXpUA-9E'Vcbs@j-#LOapnq!@MH0elLM\7\91*K\S7%T'.45sd<GLFYM#eqo%%cE<-T68dX+Ipfr.62COqsg`n%q%tC/kfb%fZHD\``hBANTEZ95@Ae-1aNK_3_:j5+%.AZ)/^-/ZeD/Y>s`sJ-<]qT]cg1-N.EbJ%/e<n\Xnu^ndqW2I,[L;piCgJI)h'"f#"[4teokP7Uh&7Ta`7ZhWLEt$R:7(b2,A/;lK&UE$,neVa]8JpDtBnT$Ga;>ADV*c7XiB9%mTHWGDs1>mA7@uMmFi$0c?e@p[@)6r>o&-6cQ4YFIbqE//@M6;cQG[9!DC'X\LJpD+Z#8-:EQ&\.893cZAV"JjAB8M>ei*Er;hgf%h?q&ucdpAg<U"^aM+bJb],Y9qd.Aimg,N(>Ak&5.00^opY-;GC]YNT-Q@r;,J)"26U:kLP`"p#,2RTMne>,hu%3EZ6-$;]28Ra+k%+leZKP[D=a+B^2;/qUB\'XUr!,jNpd=;ikHof7OWJ_Ne622i[EE2LK2C)o80TelgJYduOpFN0>llLB0L#a"*3V(0%jTVrV_&BD*D%AQ7a#dH7jRaZN3D;n-nD4>\`]AhomXM',l`BYOs'P;42N\PS7a#%&04XsU7Z]>D[?WDWrl]t>sJ:%#$9ek?;qZl<20\5t.40Irk;%AJHYF2(GS:hP?&l/S5D9p.$drZe2e2@Qg2W?b$W)[`0&d`NCoZ@c]#,/ha&FNQb&#31U(M^W1ILnD'4;+C2fWE\!='^cpGj?uf,e%]1%Y4."':Y7>3si38pnBK)tRi]4b3]MaWNhFLXW=#cM3<6n+V[0kbm,Ctm0%kto=RX4s-*?'#/aA/Q[,"2?p]J:OmiQ79G^A&Vj1%OQAqP_'Ee68P!1T#ih/P1+>?1bQM0n;KrQ['sgmb`6U1@X&R6SQA&I,j6Ds^;5R$ndH+q&Occ?4epgp8&6uMD5`>NCN1YCU$F+%:%(hOVC+k&)tqq+s;^Q/sq]1aH,N?pQR5su2UH#$t&/_ecK+n?>mF#)idQ<K?;)E6I]#.Ds;jpcL$GeGt48m;#G!mSm3Ag,1uBdV;b%pZp5VL#P*=%Um&lp;t4@W"M6kfXuZ@5g-YtFgkkJYtZ:U?CpeoG>W!oV^?*hR$8^u0r_sU`+*h:K"0iWef_-V:iH?W)?e'CCaNp/%R+p--VHJO[3Ye!(1<`^TAa9^fN+uEMCCh=5o:)ht!&nT7;K5:7#(\'9#[1A`@76ckUqq1Pa\!JibpScXZEJ's?rD>g,n5$3!&r,5%RktCeF#BG__1:`Tg;4Z>#fp\Q95Psa!o'NHd7bGeN)e_d9c=H"p+A7;0MH]G8fA+[UUt?+"p<ZJV)=`"(rS4BP6M,pJSNpc%0eff%V*N]Z(Vj-kb)d"d_'3SPlR3"pSj"h[i(1?-<qbpde8I99T"!7GAl!dcLJK`S*]L[+VH&p=BeX?GkZWI.O*B5ie?VYuJS"gRYt9S`%=;fd5j`-QG8K.4qj[54gk[uKlPr.]%nq1#IY,"?khM9oFitXb[m#hQ98j@3-=('.r3h\'>&D%E6XN[b3O"-)>&@/SGrMXdNXQ:jH%)WIpB&hmYkB0?kuCsVCKdB#Wpb]]"UAdnh$Jf4stN0VmeetAY/1b3LkMm)KsU^[Cb2E,?&^`rUP8fIoQX3=VuTRi%]3O+u1BO3XH%#0gdng>M>R'$o_X<ef$@lcL/OF0b?@J[);TorCaQRpG/!Q\(^IpkuCfS*G%S-<h7#$Yl<WCBlPJIq9+mNNt;Ef7mJ.K59MLe3S!!%lm3KL;?sIf*G`1/e3Q?_A[?EpE%Ei$EEUpr.Sib])Joqb2(,76boOaM@r6$l:CC'W`hX+(Cs*g%E2>83`(4J,/P*QR@hJhiZu^p:%L$<2UAuEFk))Pbt9id0[/^ma.J_T1C<@fh&\)r+F.YS"aOU\[]GA\9+(hi8*EkcW"JX,;uYmVhhDddRdJtVHUr&XWP:\NN[[D3?b%E4AO]$o@B^AIjB\YRlu>*XjhUAD44&Dd"Jdn1\T/-@%:!\&MF[6,<L?98]n5_1aJ50dI)Z'6aR`a)L]_Ns/U._(m"MQ?Lr6JY=Vd%bRSO_)8*"^)aK%TCA[?`5cGOD#F=^B@'&a*XRfO'C9o76&6RRAN`T#+?uC7Odm#H>E/qNAn[N(%d!]?^@">N!KJE2lMDR9?rPWP?%QL.n^":!UZ\C_k_]a$X#aH[&YI?5ga6j1_PA@\+?f9`R=+dPh8(_(I3I5!>eg[3DoJOpX/Z>g'T(l>lhK<-1WE^h/Po9.B[!gON5%=S[T6.7WfijpqM<%l,:\TJ;T0]g>s*b;B`UPb\ip(-fqSN2nC\@Iq*Z[lNQI.shhpKM='D'/9:-9_okc3UP"_'NgesX[egE#Y\.0%=8q,'VTYVH7aZ(:4pXjQ[9!,H0F=+Ml%?pa?n6X:Qt%$*Ps2^rXHbuZ_j"dQCo.`3pW`=r@_#T^:Y><2$BmVdL,$">c#@=h+D9eB%p)l&8(lc(]ZckhqPs#sR*V5OZa@-Ig=Q_OXQcEPq^4?T]?Fa4S<#&T*)YOj"Cb'cbbj&OkGn<f7]Y!.ta!Pt6M,lnF-3ScD%g%q]%p+(D"B?,u517C<29JVr9nfTX.g0>4!34"dE3eLiV;dHi1^e:cG/pT-AZu`T?1VcW0F?bV`#W(seAbH-t1Fl;-#8]a6=b04;fjel4%ZkI3fen[GM*^*t#[3pbJUgMAgGh-/&ab.Bl,R)KS6!ueuG4#o(/QHq*E"Od\Z<GA&MkR?8_(`bRc$H/?aehN/9cdOZD?YNO'1uTl%9HF<`6D`A.N#Sn\e0G2]1cZPr?Cli.[4(9s2-\^*'F^pZ6gen%Rt5Lj_CZf0<oP55agbQ3K=K<'^:4d\J[Kp_i4@ud7:P:H2m%`o%-!=VR*akiSifZ7F[[Ci^^n`m@8fQj1Dm%`o6/;@W]5*C93(S/7'^uZBP'5qGk8co:CN/)2B>d;:9^u4<+a@6(@f3=;>D1T3n(Ir)%;d",8\<fU`N@foBmPFCDmGdU;]bPE$LQB&DUkJ)l_oFVa;L?`K53^%G`d8aPc<qHD&$,u)2AfKe^i[WB]B5&/4"g@d;>@p6F[3;.%%#*(1U7*sLm[otWpgHYCX>#$.6RjN31QEW;CR%WF+KmJ1BZS=7>h@K-XMK0nNl`4#Q)Kih33rg/"cno<>;!uNY(AQ7KCc)aisl8?%(F0nr;[O4s5>T`4kLDdD69)2aZ23nJ\fs\^)ce4J0OBTI,4QJXJi3^ZUokcZ9\oVd<U*Ftq7$hk,Op?4'Y>Q=!-u\eRXt7L[+=![%/`tG_%S,BO=N[cRah2A("lf+tf:XkM)MepJB2&n8MZHVLAsR-R5-OjGoZnuD_KR>R@#;_0(:L.I]oDWY4rb4r%ZK$%XT3EK($)`"%LW6#@&n8:<E`+pK9)T=4U/T<GOH==hk%>rg?uTA5#_R,@%>:]tPBK!X&=dF'[`ut9J";-"J\d85dAN-%+MH<d"@cC)U0d1q,4U5H%?s,p0hVi1G!-6N/,h/66R,jdl:$B5&FG8_,WAM^BS8fOaE`In)L>nEmN(cQ\S-/@+`SEgI!%MX--n5L%'c6RA<$Lc'bfRla00Zm.%kI^h<<"dejI.GW]E*S%cJX,N6%E8XmF)?O!#=i*op_-ec;%[lV@8UR;raV<Ug*jiPI6<OXB-528a"[eXa(a1/=&-i=TeqVO4"')!%V773;if[Y]Gun;X.P?U(klgEl'#Vf%FWujqLir#O>gi;XFoke<RoGR"HREdg']WBA`=p&*9=&N-LpW*9SSKKG?"2VQ_/eQ$hMFej%-&ZP=0:mtujd\8*!7DL:o==tXePtVdLO&X4\m9&V5/B>/2JoA$:[kY:)EO4-T%?5=]e!`>8oS\^o73.eNd!-V\+?[*hOgJO54u"[%>ITo2Q'[fq%`RO1jE4!n]cqb5`Or=o\h%f#-Z'"+Zb\.JC>!l.:_hQ,\+>K]#-<_Emn'XV_PCn$,_@W9^4AV`dI6r6kI`dJVu$V)%ib;1BmM!NJ"EfEY=fH?g,k3>*XV?;a\?9TrJcq.Q;faSqY<f7INVa94DdsG^W8:4!bLef1G-@,[CAk`4,"SD^\F\)kaA/8uds8el%<GB?Rc4eu]W:c%Go-?kO]Jn-"H!@@iT('VoTO(61SqIj<5+O(6[oR5h:?Mq%\!Mu.ds8h-dl1:lj@IBMlY5g:V<hN`Fe8*VG32s[%k6\>tBB8%BT(%nL7Op%Y$*Ui446HogMbaaE*mPG0nX^MYAVaL6VXn?3D>I#O8#PfdF`'69eej@"G)k)YK6'dg&G3V]hV;8=VK`8,%YGG@;Chq/D[1us"U+pq>DZt?83,%Hn'l0SGRk*'E>$"e,NOPE*CP,CF$2<u0N5jg=RCh:B`oj$tf2qGs;nr'taL+r@PSh(7JVULF%"W@h?`L6Dr>]6-UE<$m>5\4W(\/r(I.E%6^'Zq9pAJE)jBD30bXpj0qeok@2cnVL"3A7@6oPWJr_2IK_k't_Sq%-)k=%Wo4MVJ6;%]?Xkj=_FnDi!"@ph\E`]rHM%(QcI0d[9cgTGGs"CWR\Qg-F9[M7Ba(#HtV8L_(,h]7MMo<MO-GAZ4)&[7Bdgf^"*7PeD)g[MQ74G%-^js[Ym%=!oNJ.`SM,oo/p3Gg1X`nMDRYEY-jM2UUXr`>_J\h=U5e#J_0`kRqZ$2>$XhY'h#/"DN$1VDQc17G$febX,-jak`;f-L%(D(%$aa7?7&XNZNhK$F_mYXKpl9,rG*eA`-0#ae@_7(=_9<!gR\!:i+l&7C@]'3ZqED$h8[-(>q"@fQ('ZE[_\r`uWj/uhrDm^\,%s.Gp85ha-WTJp.EP\0F$gA1ileU=L84>7-B7OO0H&mM0kNS\aX/2R-7h/kra0H4SXE<;?+\8Jn1@7pP/2K-1Z@;;=i@=$DA%b$n"%9OHpV(HX1/8Zl6qFPV&D_t9f61Z!E+`=C@d0&fR@?IjQ]J+KfN@U^XSG?r-u-_;B0[3"Y:M^[i+iYBgu/O57P+N%TcS<\7XD7gRG%l-&D($XfC=2XA)8-'&q%D+1gV(@/\@Gl^T[mUg,\.(Q5tBO,pM3H/5XTXS7s[e$;<EOFLn`+Re,k]-RTVBr'o?+ad[&DBO;;G*55%N_:^DGs!<eQ?'n_4;F!g_8R2@72NTIPYobR9LNRc/>?+,hRB2hZqL='(LVn2oeJT6aZXGa\*4nMi%g<seAujo5#U]Ycl5c?>6#HP%7BIQ'f3n*:<H4YTFAQ@C).q]X_96$$V6E;S-IZ.B@/s6jF1DHX)S5(Djl2stHQ:Lm_.VEd\di4U)n^&;i3f.Z$Yh-$U2i`DZ#O4C%(8S=$o>!:fP@RsU&S@9W\eAR[Uha9&;hnR8YAn3XFU)EjL>-s_c8!oom-7!@FYX.Mk]L3I5'Xc,GAN:^=iK)rlV<AG-eHlbCHo#(%R^)0qX)U&AgSU]X^,h>/l5]9`8:)j(,1t(%2`qS[f;`5):Bh(jc>Aog!R.g/JMBZGY\[KoAba>^(rb%g>o=baP%_2)b5`kT^FN&/%b^f#%@E'L[lc+m=]C@j=n'$Tdl]K^RWep\:-&B$9TId@D'MrkP,HCJ4(p369(b]3&<"VsajEYD46%%p_Ju'0s7!E"V#[!qmZ=<3@%a6k:gd@#e3=Y[<VEk7"NY.Jp[@XhnlB;\UU7DFDC.Z,LeCLVd(Bcp-7f>RZEdQjMm;Xl!TW"sZNVX2?+#AB/I(#34q1sE\;mnL(K%cZ%bi[8l=:P1h!\&A;,>DZ^V,Dl*.t<a3hs@nl=q-9%=9bl3D"XOXl[KN9]"Bd^X;V;-fX!#'k-b3T?[ae4j3a&sd;d;iVpk'ag^%M9uUCP5BIjk16Tm(,tLV_!&'Yl2BsTcs6Q07iRV;q),i-R)DoTGp,f%Eq/X6H9\Vb2enBFIP^FK]cScUjA*sfhB,lR8S]5[H@K2i%j"ngY]-?k;dZrZ2=dXEV<YR;NDl372gF-IUoR:W;'X`1fVY:16+UY+2rAYY523ku"4=kfWApQZOUgDG2e,+E0A!,CS:%&<60ifg<%5L(`c/&*0-:"Q>+Xd\/i;8cV@?jdWf.>V6/q>Ih.4*))d^H^#R\<Yqn=[$*/@861qjCr.ql2;2o[mr5KmfsUFn@heu,(0<q*3]!`%@&[uUEhhmt^bkV"VYA+K5e,8>is^iMl2?a`hajtaU)5Reg6LM:&LuB8dd2EJZJ77J+&IG`+O0<Z-9GUHpIA84@Nhh@h&g:F]@!NQ%_+s-;B(s=`Xg,2/JSF2lbjG]_4)/@$';I$@Zhqk/JmM?JL+Ql(3q"sk+.\e=&$BQ)/ioEUipNitbCdtjo>n+od5A:rh9ROK,I:D`%?\(eQe&q*>1XL5TpB+?P_T_FTX1#>2J^L-#ZMUm5mMDc'7U)/"mKZdk)R&LVDFh$LBPr=\AL%nIXF\F>KWYeX$0n:j7bl5SO"@c;%`Y_G;O&@F`7NqpIa3mQ]`rQnjZ=4Jd\A`cu@MjWl>XnoePUd-3NT,pKf5:[>+JUWiC73hBfWkRE6&&8T2j$YH1.[u&RUn8W<h%u8%-^1(OBO[?q<+&oR9NE`f'2*!;hD^W8/WD1j*'jplgA^fPf?1dH'tk`-`MtJ,^Z%f*g./CMc0J_QI-(#'CNRTL1M>mNW%mLQ@XmHu%>L)]g1i/`Hk$Td?^sn-',>!DCWCf-;8JWZ=%'PAN5M5pU3If`2W#&eXXK$&>@pYM;Z!>aN5ZiV&"b`E*NXT<I]I&Z>#"!S`"Z;?4%?N61X<mpf,)HLl>0Wf$#b\alfKR@kFRK1fGln^#<M%V=_IL1\IU;rFXDO67l9HpuZ`]g4,08*!iqRJ>KqdWeuYnHG12WP>EdAT?R%[WCA0n_PC?7W-qrL(ODn-7+TN!&Jmf@^hP[)"FjJ8uEj"44WUQZTk`PBG&Kg1]&WNB_6s)p(J'KnFVDcK!5mbGF6BS'-"#A'ghN+%RFo8<42V^U;t6Bt!VnEqVp';Goofl2XduS>rDB_`$eB,TeX.)B0ZhiPZ\eRDIOnp/b,+-["ZmMKDO8dI@`:`"@tC0pm7QX+^@lmQ%Ybq%ki[,gS&_J3O9ti^E?@>;`rU)J<^J>oRU3AKs)jl@qb`r)jV&K?<;Yo@YQ.X!Bd][qCV^A0G]XU/Y!"6AS^"+AJVI918AQ!,0%5CKuAe7/V=q!FmloZ66OJ(@78f?EGkDIh5#mpSWpAQ5\$)?#L:i(`#XV4V9QeX]e\Wfe3/*(K4jgoiLiqVgjb4=)MQ+'A$Mkc4^s%*K*T3>oEUVZIJbU#%"g#MdC!H;6,4<N)r>1,:Z6jB0ni3:DqBd')II8>sA:?Ai`.!kGl!LgXU+Po+R!rT%+*]p1'=(<4hJ]ma?/2%W1_;E-M'"nUhQ)Vc0"17O\`&pISMS,P?'S+(IB<^AiBZmYa*JZ7/U54)3)k@NPQt5A"/9:Y`ef"'gTCI9'0JBE@(3H\bOY,A:Er_%c,%n7IS$6`S5.>RA\'EMO;4b1o>FX6\bqSVJSr`0JFe$6S\$(@G`7i`MJL.%jQ1)Zcs1'25SeCfE"J!g!Oeh(Cb@q?M)[9DLF*1E%V.`?"-KbGOY3hBn(WTmV,imZFT+/]l1$gM.b8O_u1#/U/r;M,cYmSU-VL\M8l*(nk6Db[/?@[d-/9B;L9o6O\8':ms2Ah/3n10iT%nZ8#B$NXAt*E^G]eCQVg%NR(,'#)siipn<0*+(EiO[[!*YfZgY`+ua.q3Mf1o(`_Q,LVmhFpp/baWoH]PIH?>K4TKnrPQ)lM78p@%.A/u-T=rjpqVLZkL7<dBV]/tTMp.<87,#b!LKHZt\(Z-W[NcVpog)OG"k#rC,Yf/ljBD8>ZOSOd-!F7*"k&Y!.b3P_'C.JM4Ph6K%hIt'D)l4oJSa!Y^(s+fUK\,-5[JpN.c4RaS".595k4B5MPFL][-)d_IAe`H"7jl4-nC=Cu']=pM``g?t:Y&`mlKUq5c*GlMU#bMd%P!MN6s,J8lOWjJ:^BuNOb!'Rk!#Em+cinO5H%fj)TRc@7JKZpRD_#C>-nqi93^teM0LROI\h*3"8Pk17<.ME>r2ZO2nl\auqG<dE%ZVmu=.!P5bMNZ'%TU[P$dfb;R?,;qd:#kA5kR.Sr?r^b?'GJBl42?sRJ7c%O3.?J,[sT3J7G0b);X&=:`MC?sS!(e4kPth//X72[%")*eoEPDQ/Hp=$VJA;@<8#[t?]mtBb"D:^a=kV_&89U10k.hO_]1M,i8R]Ye'@+k&<!7qfMq`BS$m+Id81)M,".3P57Ce>l?;0_e%<G/t'$N:,_)2i>EWG=4pY3blN__#u;7Bb&.,%[ubdlCP1C9(qPYj!m#b)FgFU$f#X==0t(Df/J`BVouP\"?q1\Z<U9Q4$i%jD8U3%&_/$Sl<O7i#kdT%];F^;M==8<j-tBE_S[eR50PSpi@a4]T,TR1plht/CBMW><EWEC]b;A[[TWn[[S?4L?3_jPk!7F#6hGoJQ'jiI%@[n$)o=W*-F^2sJZ>`)$pA![SP&RqP"@"CQ(f,2#V+6Na?">>6,5"b@FTNnd4VedMgsUDXLg?6<\\'5GQq.Mq>Jr>C!6[rD0oo4=%@$+n6-'t'.P@OdEq^r+bV]gn*6AkjuDU#Zt0SE0d.kGQN=b)?#K9PU$P>(>^SKaftUc?EU@_fA-qd=St,SP[t`&JuD-gU-q3aKFW%_#e%Gs'ikSQ/_F2DTs,3I+pAuRT&1.RET"mH<5CDCaG=QZi[<ROHF_2i#+1ns10?NGkY?sWQ"=P#D6R<Om4&oPlTVt;V[3<GJ'=R%pa9I^ZEr[9$gm*mQ#&eAY6"P(Lu>OR"Z(8IDN$GAcK-CjT522!Z0Ri!Jm`dJi7O$BH4j^eA%s2)(e)<c^-p`sR??1;$rKf@1<2:C%-pnS%4HBT](0G5$*#lgE:d&*^M]j:c,;P%9JJO&K1P_5-'Mc5%%Q-F9,Ioi4$jYIuV%NJPV'&,u,VhducCd1VY\^Uh#&-EF"$Q:2%KE:[+6AOc(A;qLRa9Z`d##QW$7'J1/cjbC,jq3qjkV,>9aiG:/7Y'kc3J4=6o6huiifAWGX;#;$$"-Ga2U$gTYXq78_/g1D_"94r%Ri$/\U1Iblb\GmmeH'1XY@3:'=FePu:.BoY-CZQP5nL"t50S6VPrT)a7[,dJ?jp6Ek2f-.p(***cpg\/[Y^qEU^7F.cs\)_9m/0'%$-%F8#WfD4.Lk&S%&(e%FN@L+6<")oo/7jO424.WZg0:j5I4T^5.%@Oj@HoZ6f,2^A;I'o2\#$%Cq;(VRa!jH@C(`ectrFP'X#]K%QpS;C4&]6g7r6??o,LNAhji8s+IH(j'a\sXVnul@`)KDG0cB87+ZWKE0r/Mu6\^7gXiZ[9WEgC!341G-3N'/p.-spu$mhLfT:sn1%7pM:,l&pr,/<t9rMPZaoL9ae2`H[]K],9$qM&.C@Re(!59>d?KE@Kn*I853=1"iDS035`ms2D7&Q!eWU@ni='!&=&[,q0[I8e_IK%K#^7=`)e<>)4$P`7_RtXaX(:-PN!pF_/NCu$k5@^2>;,h9F>mXf,A3=Qu<%i0kMs$VG+;"G,C\UgV895G2p@\-4'Th>hN)r8ItoF%6d^L[a/W%J7g-EP'Ah6/M5^/70T+H27::P0aatNL&U`5[WG_8XDD=i?V(?$\#[_GcbTda#6'KfkMd>e[1rpa(]7WjI[<Qf)8p<&9%ppS:.J2]1ON,+E"Tul@d-p]1#*mRiA.Q/0sE81M)Pc54B>4R1ub"m6aNXI"@nH)Tq%PXg#P0$]TVPZ;1+]P?8\pL'M1>VZ1Y)'LA%G)pkGl,^juE0K!VWuWejs19/2)p%_/L[p1UnZt%,f9h6>Y/KHJXMLu?`#<Qrg6IBiOl[O'"$gs:T_I.f&N#et(p<fO)+bh7[Y)@@%-E=U<UK!X;>8Y5DPe(!Z*KjiAd(#43R@:HD2h2kuJ#r5VOjuftffFn.#(FnY)Hk$=kB3eK(i-!o`<$cWlqu<3OKlmd1eZquZ)n%L%[)2%2'S;T<6lD<U8o!p`iCh-)piK+KPGFIhS6UmqF#daH)+Q;X0'2^:NYb))BAS`6RQIL*C-*Z$7g,2MT5o)/dSF)t_HUu*H.hH'%`(>8nM%;p'=\VL=&25s[=H[V@B[j]X_."gNY_cKkWO]AX*lH4.E>s);oaQXN[XDKogWEIsdq@_f[`o9k,*(L_2.lnW;/bok1BhL1%C](b=-qJ.eI=+dP.'_j7Xp%G(T#b*V`&KEZ>OY&TWNTo@,_gD<7A%0s/4SqU:FeDP[[`Ph(R%hHNHWW3jB,b\Pjpu/[*t(cFo$lC%3H6ms_tG``1:/\)CFU*g;l&'B_,cF'M%SbjO(,G[(T=&F_N&%q(Jf-b/9BZ&D!(+;PN3=s4GeDJP:"+0^o!TJntMo+)V:LWA!i[^%,M5Y\Jj?pqUg*V&?5m^G=i)^K.3!X;F0P2]9>7!?0Ih=^a1Tnn]j*\]34>DIh*cH,)BtBh$P15ha?2H"CQ;l)+)m2pDVuqOSqYLS%[H<NY.t2b,CZ]MDA);'0Na_)'0si0%fBuar^eE2ha?2HFr"s&BnR.t/a'KZW3\(u'7(Pdg+rg<?6r3BA1!ARWV!94AoGD1PH,L"/%`R_BCWN4WYZS+lDPb`Tuq>TYSiPi0n'aW(]=QGHNoJ(0r0CCc/glFSC>T<8M<eh0&2erq9pGhlpOOLBs5PaNL0@LHH\U*erq(IMm%:Hgf7kbE(A?QHkq3PW'dgml$g4ob=sH@C!ZI<U-aGgh.`qWd3^HZsmZ35,:\qN!o<,GY')+8t?r:J^s+A^Co=~>%AI9_PrivateDataEnd